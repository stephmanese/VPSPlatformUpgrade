<?xml version="1.0" encoding="UTF-8"?>
<con:testCase xmlns:con="http://eviware.com/soapui/config" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="adf0a0a1-07c2-4f0c-be50-5c1f299e1b81" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="groupBestPrices|2 pax-promo" searchProperties="true" timeout="0">
  <con:settings id="d4db184f-1cc8-4876-ae5b-2b039fd20e2f">
    <con:setting id="adf0a0a1-07c2-4f0c-be50-5c1f299e1b81fileName">groupBestPrices%7C2-pax-promo</con:setting>
  </con:settings>
  <con:testStep type="groovy" name="loadTestData-groupShell" id="98ed8409-acd3-45cd-a8f6-af8993369e8d">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-groupShell}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="loadTestData-guestPreferences" id="1cf30843-b8d2-4821-bcee-f9a2dc4c9159">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-guestPreferences}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="setVariables" id="f1446a6c-2252-45c6-a916-f453ca9b76fc">
    <con:settings/>
    <con:config>
      <script>//set variables from the fetched test data needed for the REST request
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get data from TestData-groupShell

def agencyId = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'occupancy\'][\'2Pax\'][\'ownerAgencyId\']}' )
log.info(agencyId);
testRunner.testCase.setPropertyValue("agencyId",agencyId);


def occupancy = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'occupancy\'][\'2Pax\'][\'occupancy\']}' )
log.info(occupancy);
testRunner.testCase.setPropertyValue("occupancy",occupancy);

def shipCode = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'occupancy\'][\'2Pax\'][\'ship\']}' )
log.info(shipCode);
testRunner.testCase.setPropertyValue("shipCode",shipCode);

def sailDate = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'occupancy\'][\'2Pax\'][\'sailDate\']}' )
log.info(sailDate);
testRunner.testCase.setPropertyValue("sailDate",sailDate);

def packageCode = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'occupancy\'][\'2Pax\'][\'packageCode\']}' )
log.info(packageCode);
testRunner.testCase.setPropertyValue("packageCode",packageCode);


def officeCode = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'occupancy\'][\'2Pax\'][\'officeCode\']}' )
log.info(officeCode);
testRunner.testCase.setPropertyValue("officeCode",officeCode);

def countryCode = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'occupancy\'][\'2Pax\'][\'countryCode\']}' )
log.info(countryCode);
testRunner.testCase.setPropertyValue("countryCode",countryCode);

def currencyCode = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'occupancy\'][\'2Pax\'][\'currencyCode\']}' )
log.info(currencyCode);
testRunner.testCase.setPropertyValue("currencyCode",currencyCode);


//get data from TestData-guestPreference

def lifeStageCode = context.expand( '${loadTestData-guestPreferences#result#$[\'guestPreferences\'][0][\'lifeStageCode\']}' )
log.info(lifeStageCode);
testRunner.testCase.setPropertyValue("lifeStageCode",lifeStageCode);

def guestAge = context.expand( '${loadTestData-guestPreferences#result#$[\'guestPreferences\'][0][\'age\']}' )
log.info(guestAge);
testRunner.testCase.setPropertyValue("guestAge",guestAge);</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="groupBestPricesBefore" id="4e70713b-5076-4874-907b-30c028639675">
    <con:settings/>
    <con:config service="Pricing" resourcePath="/v1/group-best-prices" methodName="group-best-prices" xsi:type="con:RestRequestStep">
      <con:restRequest name="groupBestPricesBefore" id="0caec742-2174-409e-a2c6-687fdef2b214" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:request>{
	"agencyId": "${#TestCase#agencyId}",
	"commonParameters": {
		"bookingChannel": "PI",
		"bookingType": "G",
		"occupancy": "${#TestCase#occupancy}",
		"shipCode": "${#TestCase#shipCode}",
		"sailDate": "${#TestCase#sailDate}",
		"packageCode": "${#TestCase#packageCode}",
		"officeCode": "${#TestCase#officeCode}",
		"countryCode": "${#TestCase#countryCode}",
		"currencyCode": "${#TestCase#currencyCode}"
	},
	"guestInformation": [
		{
			"lifeStageCode": "${#TestCase#lifeStageCode}",
			"guestAge": "${#TestCase#guestAge}"
		},
		{
			"lifeStageCode": "${#TestCase#lifeStageCode}",
			"guestAge": "${#TestCase#guestAge}"
		}
	],
	"includePromotions": true,
	"showGuestDetail": true,
	"includeSoldOut": false,
	"includePrevailingRates": false
}</con:request>
        <con:originalUri>http://vps-stg-a.rccl.com/vps-sierra/pricing/v1/group-best-prices</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="76f2fb65-21b0-4a9f-adb7-b871a2a71cd1" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="ddacba21-a0bc-4c2f-9a8d-7ddce590a6d9" name="Script Assertion">
          <con:configuration>
            <scriptText>def jsonRes = messageExchange.getResponse().contentAsString

def jsonSlurper = new groovy.json.JsonSlurper();
def parse = jsonSlurper.parseText(jsonRes)

def groupBestPrices = parse.groupBestPrices
log.info groupBestPrices
assert groupBestPrices!= null</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="9ba133c3-3cd7-45c8-8561-64ce1c92ea67">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="015736b2-7549-4743-94e6-d64278e45b46">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="e94bb75c-7f53-42a7-9f97-eb5aa3fcaf53">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b2abf588-b45c-4e44-9dd0-8b2249bbc4e7">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="5322014d-43c7-4904-af96-4329a0290c25">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="495bcf82-3dfa-4956-b162-f0b1bfb07f10">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="feba3ebd-aeec-4c25-8b24-4b9e406c22cb">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b3e5490d-8b80-49fe-97a2-a82077345345">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a98aa22f-37cb-4a0e-84c6-f2de81903489">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="fetchResponse" id="b093849f-7eb7-4d4f-89d4-086bd5677d87">
    <con:settings/>
    <con:config>
      <script>//fetch the REST response
import groovy.json.JsonSlurper
import groovy.json.JsonOutput


def restResponse = context.expand( '${groupBestPricesBefore#Response}' );
def restResponse2 = new JsonSlurper().parseText(restResponse);
def prettyJson = new groovy.json.JsonBuilder(restResponse2).toPrettyString();</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="setFolderDirectory" id="437f0ec9-2133-4469-88d7-edfe18c5cad6">
    <con:settings/>
    <con:config>
      <script>//set folder directory for storing the response

String osType = System.properties['os.name'][0..6];
def directory = "";
String jsonFileName = "groupBestPrices-2pax promo.json"

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsResponseBeforeMigration/" + jsonFileName
	}
else{
	directory = "/Applications/VPS_JSON/vpsResponseBeforeMigration/" + jsonFileName // to insert directory for mac
	}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="datasink" name="storeResponse" id="1651a0c5-32a6-457b-8c9b-77b991c72da6">
    <con:settings/>
    <con:config xsi:type="con:DataSinkStep">
      <con:dataSink type="File">
        <con:configuration>
          <fileName>${setFolderDirectory#result}</fileName>
          <separator/>
          <escape/>
          <quote>false</quote>
          <trim>true</trim>
          <append>false</append>
          <encoding>UTF-8</encoding>
        </con:configuration>
      </con:dataSink>
      <con:properties>
        <con:property>
          <con:name>groupBestPrices-2pax promo</con:name>
          <con:value>${fetchResponse#result}</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>agencyId</con:name>
      <con:value>97466</con:value>
    </con:property>
    <con:property>
      <con:name>occupancy</con:name>
      <con:value>2</con:value>
    </con:property>
    <con:property>
      <con:name>shipCode</con:name>
      <con:value>EC</con:value>
    </con:property>
    <con:property>
      <con:name>sailDate</con:name>
      <con:value>20250111</con:value>
    </con:property>
    <con:property>
      <con:name>packageCode</con:name>
      <con:value>EC09E046</con:value>
    </con:property>
    <con:property>
      <con:name>officeCode</con:name>
      <con:value>OSL</con:value>
    </con:property>
    <con:property>
      <con:name>countryCode</con:name>
      <con:value>SWE</con:value>
    </con:property>
    <con:property>
      <con:name>currencyCode</con:name>
      <con:value>SEK</con:value>
    </con:property>
    <con:property>
      <con:name>lifeStageCode</con:name>
      <con:value>A</con:value>
    </con:property>
    <con:property>
      <con:name>guestAge</con:name>
      <con:value>45</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
</con:testCase>
