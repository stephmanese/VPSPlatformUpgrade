<?xml version="1.0" encoding="UTF-8"?>
<con:testCase xmlns:con="http://eviware.com/soapui/config" id="b7ef9296-8ab0-4146-91fe-b3359d240920" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="promotion-super-category-best-prices|R-CO-w/guest qualifier" searchProperties="true" timeout="0" disabled="true">
  <con:settings id="be6c02ee-8cdf-4adc-a430-840f4700e160">
    <con:setting id="b7ef9296-8ab0-4146-91fe-b3359d240920fileName">promotion-super-category-best-prices%7CR-CO-w%2Fguest-qualifier</con:setting>
  </con:settings>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="loadTestData-royal" id="8172574a-f5f4-4bc7-a975-8842b4e9d616">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-royal}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="loadTestData-market" id="fb8a41bc-c261-4380-9b7f-b53cb34e0c1e">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-market}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="setVariables" id="cc1605cf-2caa-46cf-b26e-85f8bc11e89b">
    <con:settings/>
    <con:config>
      <script>//set variables from the fetched test data needed for the REST request
import groovy.json.JsonSlurper
import groovy.json.JsonOutput


//get data from TestData-royal
def shipCode = context.expand( '${loadTestData-royal#result#$[\'royal\'][\'CO\'][\'shipCode\']}' )
log.info(shipCode);
testRunner.testCase.setPropertyValue("shipCode",shipCode);

def sailDate = context.expand( '${loadTestData-royal#result#$[\'royal\'][\'CO\'][\'sailDate\']}' )
log.info(sailDate);
testRunner.testCase.setPropertyValue("sailDate",sailDate);

def packageCode = context.expand( '${loadTestData-royal#result#$[\'royal\'][\'CO\'][\'packageCode\']}' )
log.info(packageCode);
testRunner.testCase.setPropertyValue("packageCode",packageCode);

def promoCode = context.expand( '${loadTestData-royal#result#$[\'royal\'][\'CO\'][\'promotionGuestQualifier\'][\'promoCodes\'][0]}' )
log.info(promoCode);
testRunner.testCase.setPropertyValue("promoCode",promoCode);

def lifeStageCode = context.expand( '${loadTestData-royal#result#$[\'royal\'][\'CO\'][\'promotionGuestQualifier\'][\'guestPreferences\'][0][\'lifeStageCode\']}' )
log.info(lifeStageCode);
testRunner.testCase.setPropertyValue("lifeStageCode",lifeStageCode);

def guestAge = context.expand( '${loadTestData-royal#result#$[\'royal\'][\'CO\'][\'promotionGuestQualifier\'][\'guestPreferences\'][0][\'age\']}' )
log.info(guestAge);
testRunner.testCase.setPropertyValue("guestAge",guestAge);

def loyaltyTierCode = context.expand( '${loadTestData-royal#result#$[\'royal\'][\'CO\'][\'promotionGuestQualifier\'][\'guestPreferences\'][0][\'loyaltyTierCode\']}' )
log.info(loyaltyTierCode);
testRunner.testCase.setPropertyValue("loyaltyTierCode",loyaltyTierCode);

def loyaltyId = context.expand( '${loadTestData-royal#result#$[\'royal\'][\'CO\'][\'promotionGuestQualifier\'][\'guestPreferences\'][0][\'loyaltyId\']}' )
log.info(loyaltyId);
testRunner.testCase.setPropertyValue("loyaltyId",loyaltyId);

def residenceStateProvinceCode = context.expand( '${loadTestData-royal#result#$[\'royal\'][\'CO\'][\'promotionGuestQualifier\'][\'guestPreferences\'][0][\'residenceStateProvinceCode\']}' )
log.info(residenceStateProvinceCode);
testRunner.testCase.setPropertyValue("residenceStateProvinceCode",residenceStateProvinceCode);

//get data from TestDate-market
def countryCode = context.expand( '${loadTestData-market#result#$[\'market\'][\'USA\'][\'countryCode\']}' )
log.info(countryCode);
testRunner.testCase.setPropertyValue("countryCode",countryCode);

def officeCode = context.expand( '${loadTestData-market#result#$[\'market\'][\'USA\'][\'officeCode\']}' )
log.info(officeCode);
testRunner.testCase.setPropertyValue("officeCode",officeCode);

def currencyCode = context.expand( '${loadTestData-market#result#$[\'market\'][\'USA\'][\'currencyCode\']}' )
log.info(currencyCode);
testRunner.testCase.setPropertyValue("currencyCode",currencyCode);</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="restrequest" name="promotion-super-category-best-prices|R-CO-w/guest qualifier-Before" id="18995667-bfd3-42ce-a1e0-2c687b416270">
    <con:settings/>
    <con:config service="Pricing" resourcePath="/v1/promotion-super-category-best-prices" methodName="promotion-super-category-best-prices" xsi:type="con:RestRequestStep">
      <con:restRequest name="promotion-super-category-best-prices|R-CO-w/guest qualifier-Before" id="7038a682-c248-4038-8c45-118b6d284f2a" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:request>{
	"commonParameters": {
		"shipCode": "${#TestCase#shipCode}",
		"sailDate": "${#TestCase#sailDate}",
		"packageCode": "${#TestCase#packageCode}",
		"bookingChannel": "ES",
		"officeCode": "${#TestCase#officeCode}",
		"countryCode": "${#TestCase#countryCode}",
		"currencyCode": "${#TestCase#currencyCode}",
		"bookingType": "I",
		"occupancy": 1
	},
	"showGuestDetail": true,
	"promoCodes": [
		"${#TestCase#promoCode}"
	],
	"guestInformation": [
		{
			"lifeStageCode": "${#TestCase#lifeStageCode}",
			"guestAge": "${#TestCase#guestAge}",
			"loyaltyTierCode": "${#TestCase#loyaltyTierCode}",
			"loyaltyId": "${#TestCase#loyaltyId}",
			"residenceStateProvinceCode": "${#TestCase#residenceStateProvinceCode}"
		}
	]
}</con:request>
        <con:assertion type="Valid HTTP Status Codes" id="0e058b07-817c-421b-bfc4-62c3c2612e2e" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="5dc282cc-5d61-4a42-b314-79763221b84b" name="Script Assertion">
          <con:configuration>
            <scriptText>def jsonRes = messageExchange.getResponse().contentAsString

def jsonSlurper = new groovy.json.JsonSlurper();
def parse = jsonSlurper.parseText(jsonRes)

def superCategoryBestPrices = parse.promotionBestPrices[0].superCategoryBestPrices
log.info superCategoryBestPrices
assert superCategoryBestPrices!= null</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="9ba133c3-3cd7-45c8-8561-64ce1c92ea67">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="015736b2-7549-4743-94e6-d64278e45b46">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="e94bb75c-7f53-42a7-9f97-eb5aa3fcaf53">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b2abf588-b45c-4e44-9dd0-8b2249bbc4e7">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="5322014d-43c7-4904-af96-4329a0290c25">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="495bcf82-3dfa-4956-b162-f0b1bfb07f10">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="feba3ebd-aeec-4c25-8b24-4b9e406c22cb">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b3e5490d-8b80-49fe-97a2-a82077345345">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a98aa22f-37cb-4a0e-84c6-f2de81903489">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="fetchResponse" id="d1c68fb0-fc38-4777-a2fc-c666acb0c44d">
    <con:settings/>
    <con:config>
      <script>//fetch the REST response
import groovy.json.JsonSlurper
import groovy.json.JsonOutput


def restResponse = context.expand( '${promotion-super-category-best-prices|R-CO-w/guest qualifier-Before#Response}' );
def restResponse2 = new JsonSlurper().parseText(restResponse);
def prettyJson = new groovy.json.JsonBuilder(restResponse2).toPrettyString();</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="setFolderDirectory" id="7cb3c919-6128-449e-ad57-b13565be0a63">
    <con:settings/>
    <con:config>
      <script>//set folder directory for storing the response

String osType = System.properties['os.name'][0..6];
def directory = "";
String jsonFileName = "promotion-super-category-best-prices-R-CO-w-guestQualifier.json"

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsResponseBeforeMigration/" + jsonFileName
	}
else{
	directory = "/Applications/VPS_JSON/vpsResponseBeforeMigration/" + jsonFileName // to insert directory for mac
	}</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="datasink" name="storeResponse" id="c489377d-0803-4acd-ab1e-0997d771444c">
    <con:settings/>
    <con:config xsi:type="con:DataSinkStep">
      <con:dataSink type="File">
        <con:configuration>
          <fileName>${setFolderDirectory#result}</fileName>
          <separator/>
          <escape/>
          <quote>false</quote>
          <trim>true</trim>
          <append>false</append>
          <encoding>UTF-8</encoding>
        </con:configuration>
      </con:dataSink>
      <con:properties>
        <con:property>
          <con:name>promotion-super-category-best-prices-R-CO-w-guestQualifier</con:name>
          <con:value>${fetchResponse#result}</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:properties/>
  <con:reportParameters/>
</con:testCase>
