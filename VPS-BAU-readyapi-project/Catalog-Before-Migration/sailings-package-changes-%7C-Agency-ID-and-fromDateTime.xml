<?xml version="1.0" encoding="UTF-8"?>
<con:testCase xmlns:con="http://eviware.com/soapui/config" id="02625017-d394-4969-b149-71d1242f8d25" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="sailings-package-changes | Agency ID and fromDateTime" searchProperties="true" timeout="0">
  <con:settings id="04b9043c-4202-4330-8238-c724cfc14fce">
    <con:setting id="02625017-d394-4969-b149-71d1242f8d25fileName">sailings-package-changes-%7C-Agency-ID-and-fromDateTime</con:setting>
  </con:settings>
  <con:testStep type="groovy" name="loadTestData" id="16022c86-64fc-4f9e-927b-e9481c0c7317">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-agency}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="setVariables" id="0e10e36c-fc99-4aba-b095-e3818d7391b0">
    <con:settings/>
    <con:config>
      <script>//set variables from the fetched test data needed for the REST request
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

def agencyId = context.expand( '${loadTestData#result#$[\'agency\'][\'odysseus\'][\'clientId\']}' )
log.info(agencyId);
testRunner.testCase.setPropertyValue("agencyId",agencyId);



//to Get the date and convert to TimeZone
Date now = new Date()
log.info(now)

def fromDateTime = now.format("yyyy-MM-dd'T'HH:mm:ss", TimeZone.getTimeZone('EST'))
log.info(fromDateTime)
testRunner.testCase.setPropertyValue("fromDateTime",fromDateTime);</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="sailings-package-changesBefore" id="b8b846d0-3c2d-4623-ac49-e694597bb686">
    <con:settings/>
    <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" service="Catalog" resourcePath="/v1/sailing-package-changes" methodName="sailing-package-changes" xsi:type="con:RestRequestStep">
      <con:restRequest name="sailings-package-changesBefore" id="4bd80fd7-2cf5-4ac4-8cd6-5fbf78a27e5e" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="Content-Type" value="application/json" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:request>{
  "agencyId": "${#TestCase#agencyId}",
  "fromDateTime": "${#TestCase#fromDateTime}"
}</con:request>
        <con:originalUri>http://vps-stg-a.rccl.com/vps-sierra/catalog/v1/sailing-package-changes</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="84d11ef8-57aa-40c4-81e0-9a7c5dbc7175" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="68017e57-ac19-4350-b5d5-19ddea15da64" name="Script Assertion (If the keys are not present, check Open Search)">
          <con:configuration>
            <scriptText>def jsonRes = messageExchange.getResponse().contentAsString


def jsonSlurper = new groovy.json.JsonSlurper();
def parse = jsonSlurper.parseText(jsonRes)


def keys = parse.keys[0]
log.info keys
assert keys!=null</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="9ba133c3-3cd7-45c8-8561-64ce1c92ea67">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="015736b2-7549-4743-94e6-d64278e45b46">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="e94bb75c-7f53-42a7-9f97-eb5aa3fcaf53">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b2abf588-b45c-4e44-9dd0-8b2249bbc4e7">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="5322014d-43c7-4904-af96-4329a0290c25">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="495bcf82-3dfa-4956-b162-f0b1bfb07f10">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="feba3ebd-aeec-4c25-8b24-4b9e406c22cb">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b3e5490d-8b80-49fe-97a2-a82077345345">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a98aa22f-37cb-4a0e-84c6-f2de81903489">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="fetchResponse" id="16c46505-637a-4e85-ac13-7d4196e094b6">
    <con:settings/>
    <con:config>
      <script>//fetch the REST response
import groovy.json.JsonSlurper
import groovy.json.JsonOutput


def restResponse = context.expand( '${sailings-package-changesBefore#Response}' );
def restResponse2 = new JsonSlurper().parseText(restResponse);
def prettyJson = new groovy.json.JsonBuilder(restResponse2).toPrettyString();</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="setFolderDirectory" id="ec18d60b-0a16-491f-84c5-0d755c760679">
    <con:settings/>
    <con:config>
      <script>//set folder directory for storing the response

String osType = System.properties['os.name'][0..6];
def directory = "";
String jsonFileName = "sailings-package-change-AgencyIDandfromDateTime.json"

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsResponseBeforeMigration/" + jsonFileName
	}
else{
	directory = "/Applications/VPS_JSON/vpsResponseBeforeMigration/" + jsonFileName // to insert directory for mac
	}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="datasink" name="storeResponse" id="deb7f14a-7d12-4ff8-94b6-21193ee85eb2">
    <con:settings/>
    <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:DataSinkStep">
      <con:dataSink type="File">
        <con:configuration>
          <fileName>${setFolderDirectory#result}</fileName>
          <separator/>
          <escape/>
          <quote>false</quote>
          <trim>true</trim>
          <append>false</append>
          <encoding>UTF-8</encoding>
        </con:configuration>
      </con:dataSink>
      <con:properties>
        <con:property>
          <con:name>sailings-package-change-AgencyIDandfromDateTime</con:name>
          <con:value>${fetchResponse#result}</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>agencyId</con:name>
      <con:value>355510</con:value>
    </con:property>
    <con:property>
      <con:name>fromDateTime</con:name>
      <con:value>2024-02-05T02:00:56</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
</con:testCase>
