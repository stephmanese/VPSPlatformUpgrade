<?xml version="1.0" encoding="UTF-8"?>
<con:testCase xmlns:con="http://eviware.com/soapui/config" id="97df2477-a9ea-45df-ac35-2139ec18a0f7" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="validateAgencies|Agency 1 (Tour Operator)" searchProperties="true" timeout="0" disabled="true">
  <con:settings id="1d65a8bb-e7bf-472c-988e-ca5a9dac951e">
    <con:setting id="97df2477-a9ea-45df-ac35-2139ec18a0f7fileName">validateAgencies%7CAgency-1-%28Tour-Operator%29</con:setting>
  </con:settings>
  <con:testStep type="groovy" name="loadTestData" id="7e5fbed0-8952-4610-9304-4eae08627ff1">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-agency}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="setVariables" id="45222143-c3d4-4ec3-8f34-789f10dc7170">
    <con:settings/>
    <con:config>
      <script>//set variables from the fetched test data needed for the REST request
import groovy.json.JsonSlurper
import groovy.json.JsonOutput


def agencyId = context.expand( '${loadTestData#result#$[\'agency\'][\'TOAgency\'][\'clientId\']}' )
log.info(agencyId);
testRunner.testCase.setPropertyValue("agencyId",agencyId);

def officeCode = context.expand( '${loadTestData#result#$[\'agency\'][\'TOAgency\'][\'officeCode\']}' )
log.info(officeCode);
testRunner.testCase.setPropertyValue("officeCode",officeCode);


def countryCode = context.expand( '${loadTestData#result#$[\'agency\'][\'TOAgency\'][\'countryCode\']}' )
log.info(countryCode);
testRunner.testCase.setPropertyValue("countryCode",countryCode);


def currencyCode = context.expand( '${loadTestData#result#$[\'agency\'][\'TOAgency\'][\'currencyCode\']}' )
log.info(currencyCode);
testRunner.testCase.setPropertyValue("currencyCode",currencyCode);</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="validateAgenciesBefore" id="d04501e9-e9ca-4a2f-8153-bc2175f294a0">
    <con:settings/>
    <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" service="Agency" resourcePath="/v1/validateAgencies" methodName="validateAgencies" xsi:type="con:RestRequestStep">
      <con:restRequest name="validateAgenciesBefore" id="b03cebef-3c73-4e4c-9dc8-7fb8707ee9ec" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:request>{
	"firstAgency": "${#TestCase#agencyId}",
	"officeCode": "${#TestCase#officeCode}",
	"countryCode": "${#TestCase#countryCode}",
	"currencyCode": "${#TestCase#currencyCode}",
	"bookingChannelEnum": "ES"
}</con:request>
        <con:originalUri>http://vps-stg-a.rccl.com/vps-sierra/agency/v1/validateAgencies</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="74f35a96-a31e-43e0-81ad-29bae1a33813" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="6ec2a4a6-56d9-4e7b-903d-fab95e03d81b">
          <con:configuration>
            <scriptText>def jsonRes = messageExchange.getResponse().contentAsString


def jsonSlurper = new groovy.json.JsonSlurper();
def parse = jsonSlurper.parseText(jsonRes)


def valid = parse.valid
log.info valid
assert (valid!=null)&amp;&amp;(valid==true)

def validate = parse 
log.info validate</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="9ba133c3-3cd7-45c8-8561-64ce1c92ea67">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="015736b2-7549-4743-94e6-d64278e45b46">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="e94bb75c-7f53-42a7-9f97-eb5aa3fcaf53">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b2abf588-b45c-4e44-9dd0-8b2249bbc4e7">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="5322014d-43c7-4904-af96-4329a0290c25">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="495bcf82-3dfa-4956-b162-f0b1bfb07f10">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="feba3ebd-aeec-4c25-8b24-4b9e406c22cb">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b3e5490d-8b80-49fe-97a2-a82077345345">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a98aa22f-37cb-4a0e-84c6-f2de81903489">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="fetchResponse" id="bb78faf3-6a13-4044-920b-f7cf89b72bd2">
    <con:settings/>
    <con:config>
      <script>//fetch the REST response
import groovy.json.JsonSlurper
import groovy.json.JsonOutput


def agencyResponse = context.expand( '${validateAgenciesBefore#Response}' );
def agencyResponse2 = new JsonSlurper().parseText(agencyResponse);
def prettyJson = new groovy.json.JsonBuilder(agencyResponse2).toPrettyString();</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="setFolderDirectory" id="0a7fa762-84cd-422f-8fd0-86aebdcf848b">
    <con:settings/>
    <con:config>
      <script>//set folder directory for storing the response

String osType = System.properties['os.name'][0..6];
def directory = "";
String jsonFileName = "validateAgencies-Agency1TourOperator.json"

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsResponseBeforeMigration/" + jsonFileName
	}
else{
	directory = "/Applications/VPS_JSON/vpsResponseBeforeMigration/" + jsonFileName // to insert directory for mac
	}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="datasink" name="storeResponse" id="bf7289b6-7edd-4b0b-8ee0-add61787b213">
    <con:settings/>
    <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:DataSinkStep">
      <con:dataSink type="File">
        <con:configuration>
          <fileName>${setFolderDirectory#result}</fileName>
          <separator/>
          <escape/>
          <quote>false</quote>
          <trim>true</trim>
          <append>false</append>
          <encoding>UTF-8</encoding>
        </con:configuration>
      </con:dataSink>
      <con:properties>
        <con:property>
          <con:name>validateAgencies-Agency1TourOperator</con:name>
          <con:value>${fetchResponse#result}</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>agencyId</con:name>
      <con:value>269696</con:value>
    </con:property>
    <con:property>
      <con:name>officeCode</con:name>
      <con:value>MIA</con:value>
    </con:property>
    <con:property>
      <con:name>countryCode</con:name>
      <con:value>CAN</con:value>
    </con:property>
    <con:property>
      <con:name>currencyCodes</con:name>
      <con:value>${loadTestData#result#$['agency']['VPRoyalCaribbeanAUST']['currencyCode']</con:value>
    </con:property>
    <con:property>
      <con:name>currencyCode</con:name>
      <con:value>CAD</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
</con:testCase>
