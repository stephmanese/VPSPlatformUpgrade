<?xml version="1.0" encoding="UTF-8"?>
<con:testCase xmlns:con="http://eviware.com/soapui/config" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="0584c6b3-5089-465d-8423-da47311665e0" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="promo-codes:by-loyalty-email|Search both loyalty &amp; email only" searchProperties="true" timeout="0">
  <con:settings id="3298a49b-b01a-443c-af54-08cb9748da35">
    <con:setting id="0584c6b3-5089-465d-8423-da47311665e0fileName">promo-codes%3Aby-loyalty-email%7CSearch-both-loyalty-%26-email-only</con:setting>
  </con:settings>
  <con:testStep type="groovy" name="loadTestData-promoSpecificScenario" id="b3ee21fd-3eb8-46fb-bf34-d28e5756ff06">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-promoSpecifScenario}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="setVariables" id="c1e8d8f7-8b8a-456f-8792-e58b42e57cb0">
    <con:settings/>
    <con:config>
      <script>//set variables from the fetched test data needed for the REST request
import groovy.json.JsonSlurper
import groovy.json.JsonOutput


def loyaltyId = context.expand( '${loadTestData-promoSpecificScenario#result#$[\'promoSpecifScenario\'][\'TO\'][\'TORestricted\'][\'guestPreferences\'][0][\'loyaltyId\']}' )
log.info(loyaltyId);
testRunner.testCase.setPropertyValue("loyaltyId",loyaltyId);

def emailAddress = context.expand( '${loadTestData-promoSpecificScenario#result#$[\'promoSpecifScenario\'][\'TO\'][\'TORestricted\'][\'guestPreferences\'][0][\'email\']}' )
log.info(emailAddress);
testRunner.testCase.setPropertyValue("emailAddress",emailAddress);</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="promo-codes:by-loyalty-emailAfter" id="a35a9b57-c5ae-48fc-a9ae-5f56e976f1e4">
    <con:settings/>
    <con:config service="promo-code(Ingress)(Used by BRMS)" resourcePath="/v1/promo-codes:by-loyalty-email" methodName="promo-codes:by-loyalty-email" xsi:type="con:RestRequestStep">
      <con:restRequest name="promo-codes:by-loyalty-emailAfter" id="d03946c4-8773-40ad-94e8-745184ab7221" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:request>{
	"loyaltyIds": [
		"${#TestCase#loyaltyId}"
	],
	"emailAddresses": [
		"${#TestCase#emailAddress}"
	],
	"filters": {}
}</con:request>
        <con:originalUri>http://vps-stg-a.rccl.com/vps-sierra/promo-code/v1/promo-codes:by-loyalty-email</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="daa10987-2fff-4a13-9877-427114f2d37b" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="4654657a-c9da-4031-b9d8-f9865d275d58" name="Script Assertion">
          <con:configuration>
            <scriptText>def jsonRes = messageExchange.getResponse().contentAsString


def jsonSlurper = new groovy.json.JsonSlurper();
def parse = jsonSlurper.parseText(jsonRes)


def promoCodes = parse.promoCodes
log.info promoCodes
assert promoCodes!=null


def email = parse.promoCodes.emailAddress
log.info email
assert email!=null


def loyaltyId = parse.promoCodes.loyaltyId
log.info loyaltyId
assert loyaltyId!=null</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="9ba133c3-3cd7-45c8-8561-64ce1c92ea67">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="015736b2-7549-4743-94e6-d64278e45b46">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="e94bb75c-7f53-42a7-9f97-eb5aa3fcaf53">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b2abf588-b45c-4e44-9dd0-8b2249bbc4e7">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="5322014d-43c7-4904-af96-4329a0290c25">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="495bcf82-3dfa-4956-b162-f0b1bfb07f10">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="feba3ebd-aeec-4c25-8b24-4b9e406c22cb">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b3e5490d-8b80-49fe-97a2-a82077345345">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a98aa22f-37cb-4a0e-84c6-f2de81903489">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="compareResponse" id="0d319751-7ab8-4278-8eab-f04c2eb5e7d6">
    <con:settings/>
    <con:config>
      <script><![CDATA[//reference: https://support.smartbear.com/readyapi/faq/how-do-i-compare-two-dynamic-json-responses/
//compare before and after migration response
import groovy.json.*
import com.eviware.soapui.support.JsonPathValueNode
import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.databind.node.ArrayNode
import com.fasterxml.jackson.databind.node.ObjectNode
import com.jayway.jsonpath.Configuration
import com.jayway.jsonpath.JsonPath
import com.jayway.jsonpath.spi.json.JacksonJsonNodeJsonProvider
import com.jayway.jsonpath.spi.mapper.JacksonMappingProvider
import com.eviware.soapui.model.testsuite.*;

def responseIsSame = true  //flag for validation

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsResponseBeforeMigration/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsResponseBeforeMigration/" //to insert directory for mac
	}



//baseline response
//Modify JSON Name
def filePath = directory + "promo-codes-by-loyalty-email-Search both loyalty and email only.json"
def baselineResp = new JsonSlurper().parseText(new File(filePath).text)
baselineResp.status.remove("dateTime")
def modifiedBaselineResp = JsonOutput.toJson(baselineResp)

//Modify JSON Response
//current response
def currentJsonResp = context.expand('${promo-codes:by-loyalty-emailAfter#Response}') 
def outputOfCurrentResp = new JsonSlurper().parseText(currentJsonResp)
outputOfCurrentResp.status.remove("dateTime")
def modifiedOutputOfCurrentResp = JsonOutput.toJson(outputOfCurrentResp)

log.info("Baseline Response: " + modifiedBaselineResp)
log.info("Output of CurrentResponse: " + modifiedOutputOfCurrentResp)

mapper = new ObjectMapper()
JsonNode CBP = mapper.readTree(modifiedBaselineResp);
JsonNode CBP2 = mapper.readTree(modifiedOutputOfCurrentResp);

Set<JsonPathValueNode> pathValues = listLeafValues(CBP, '$');
Set<JsonPathValueNode> pathValues2 = listLeafValues(CBP2, '$');
Configuration configuration = Configuration.builder()
        .jsonProvider(new JacksonJsonNodeJsonProvider())
        .mappingProvider(new JacksonMappingProvider(mapper))
        .build();

pathValues.each {
    try {
        JsonPath jsonPath = JsonPath.compile(it.path);
        JsonNode result = jsonPath.read(CBP2, configuration);
        
        if (result != it.valueNode) {
            log.info('Node with path ' + it.path + ' and value ' + it.valueNode + ' are not matched')
            responseIsSame = false
        }
    } catch (Exception e) {
        log.info('Node with path ' + it.path + ' and value ' + it.valueNode + ' are not matched')
        responseIsSame = false
    }
}

pathValues2.each {
    try {
        JsonPath jsonPath = JsonPath.compile(it.path);
        JsonNode result = jsonPath.read(CBP, configuration);
        
        if (result != it.valueNode) {
            log.info('Node with path ' + it.path + ' and value ' + it.valueNode + ' are not matched')
            responseIsSame = false
        }
    } catch (Exception e) {
        log.info('Node with path ' + it.path + ' and value ' + it.valueNode + ' are not matched')
        responseIsSame = false
    }
}

Set<JsonPathValueNode> listLeafValues(JsonNode jsonObject, String path) {
    if (jsonObject.isObject()) {
        return getValuesFrom((ObjectNode) jsonObject, path);
    } else if (jsonObject.isArray()) {
        return getValuesFrom((ArrayNode) jsonObject, path);
    } else {
    }
}

Set<JsonPathValueNode> getValuesFrom(ObjectNode jsonObject, String path) {
    Set<JsonPathValueNode> values = new LinkedHashSet<>();
    Iterator<Map.Entry<String, JsonNode>> fields = jsonObject.fields();
    while (fields.hasNext()) {
        Map.Entry<String, JsonNode> field = fields.next();
        JsonNode value = field.getValue();
        String nodePath = path + "." + field.getKey();
        addValue(values, value, nodePath);
    }
    return values;
}

Set<JsonPathValueNode> getValuesFrom(ArrayNode array, String nodePath) {
    Set<JsonPathValueNode> values = new LinkedHashSet<>();
    int index = 0;
    for (JsonNode value : array) {
        addValue(values, value, nodePath + "[" + index + "]");
        index++;
    }
    return values;
}

def addValue(Set<JsonPathValueNode> values, JsonNode value, String nodePath) {
    if (value.isObject()) {
        values.addAll(getValuesFrom((ObjectNode) value, nodePath));
    } else if (value.isArray()) {
        values.addAll(getValuesFrom((ArrayNode) value, nodePath));
    } else if (value.isValueNode()) {
        values.add(new JsonPathValueNode(nodePath, value));
    }
}

assert responseIsSame == true
log.info("Before Migration and After Migration Responses are matched")]]></script>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>loyaltyId</con:name>
      <con:value>388386047</con:value>
    </con:property>
    <con:property>
      <con:name>emailAddress</con:name>
      <con:value>CA72BB83E6EC06241B617532CDC30AB5E461612A6900D7D1330BA77E2221D90C</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
</con:testCase>
