<?xml version="1.0" encoding="UTF-8"?>
<con:testCase xmlns:con="http://eviware.com/soapui/config" id="140a4da5-55b8-4f5d-aa15-c6bdf6afcf8b" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="group-shells|Traditional - TO - SOME" searchProperties="true" timeout="0" disabled="true">
  <con:settings id="63fe1659-2426-441f-b501-9a5e2b8ff9cf">
    <con:setting id="140a4da5-55b8-4f5d-aa15-c6bdf6afcf8bfileName">group-shells%7CTraditional---TO---SOME</con:setting>
  </con:settings>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="loadTestData-groupShell" id="7826c3db-b78a-453c-ba7b-4112a2d12624">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-groupShell}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="setVariables" id="a9b1e7de-f508-49bc-9547-5e95565f56a5">
    <con:settings/>
    <con:config>
      <script>//set variables from the fetched test data needed for the REST request
import groovy.json.JsonSlurper
import groovy.json.JsonOutput


//get data from TestData-groupShell
def agencyId = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'traditional\'][\'TO\'][\'some\'][\'ownerAgencyId\']}' )
log.info(agencyId);
testRunner.testCase.setPropertyValue("agencyId",agencyId);

def masterHeadquarterId = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'traditional\'][\'TO\'][\'some\'][\'ownerMasterHqId\']}' )
log.info(masterHeadquarterId);
testRunner.testCase.setPropertyValue("masterHeadquarterId",masterHeadquarterId);

def alternateHierarchyHQId = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'traditional\'][\'TO\'][\'some\'][\'ownerAlternateHierarchyHqId\']}' )
log.info(alternateHierarchyHQId);
testRunner.testCase.setPropertyValue("alternateHierarchyHQId",alternateHierarchyHQId);

def commonOwnershipHQId = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'traditional\'][\'TO\'][\'some\'][\'ownerCommonOwnershipHqId\']}' )
log.info(commonOwnershipHQId);
testRunner.testCase.setPropertyValue("commonOwnershipHQId",commonOwnershipHQId);

def sailDate = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'traditional\'][\'TO\'][\'some\'][\'sailDate\']}' )
log.info(sailDate);
testRunner.testCase.setPropertyValue("sailDate",sailDate);

def packageCode = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'traditional\'][\'TO\'][\'some\'][\'packageCode\']}' )
log.info(packageCode);
testRunner.testCase.setPropertyValue("packageCode",packageCode);

def shipCode = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'traditional\'][\'TO\'][\'some\'][\'ship\']}' )
log.info(shipCode);
testRunner.testCase.setPropertyValue("shipCode",shipCode);

def countryCode = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'traditional\'][\'TO\'][\'some\'][\'countryCode\']}' )
log.info(countryCode);
testRunner.testCase.setPropertyValue("countryCode",countryCode);

def currency = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'traditional\'][\'TO\'][\'some\'][\'currencyCode\']}' )
log.info(currency);
testRunner.testCase.setPropertyValue("currency",currency);

def occupancy = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'traditional\'][\'TO\'][\'some\'][\'occupancy\']}' )
log.info(occupancy);
testRunner.testCase.setPropertyValue("occupancy",occupancy);</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="restrequest" name="group-shells|Traditional - TO - SOME-Before" id="6b0d0b9d-dbd2-4338-8a17-6e95b2239098">
    <con:settings/>
    <con:config service="Group Shell" resourcePath="/v1/group-shells" methodName="group-shells" xsi:type="con:RestRequestStep">
      <con:restRequest name="group-shells|Traditional - TO - SOME-Before" id="dbb5d645-70f1-498c-a9f4-929fb7b26953" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:request>{
	"agencyId": "${#TestCase#agencyId}",
	"masterHeadquarterId": "${#TestCase#masterHeadquarterId}",
	"alternateHierarchyHQId": "${#TestCase#alternateHierarchyHQId}",
	"commonOwnershipHQId": "${#TestCase#commonOwnershipHQId}",
	"sailDate": "${#TestCase#sailDate}",
	"shipCode": "${#TestCase#shipCode}",
	"packageCode": "${#TestCase#packageCode}",
	"countryCode": "${#TestCase#countryCode}",
	"currency": "${#TestCase#currency}",
	"occupancy": "${#TestCase#occupancy}",
	"includeSoldOut": true
}</con:request>
        <con:assertion type="Valid HTTP Status Codes" id="a7306f1b-de0e-48ed-820c-c970eea1ed4d" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="dbdd9061-88b5-44bf-ab63-8c2fcd0646ac" name="Script Assertion">
          <con:configuration>
            <scriptText>def jsonRes = messageExchange.getResponse().contentAsString

def jsonSlurper = new groovy.json.JsonSlurper();
def parse = jsonSlurper.parseText(jsonRes)

def groupShells = parse.groupShells[0]
log.info groupShells
assert groupShells != null</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="9ba133c3-3cd7-45c8-8561-64ce1c92ea67">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="015736b2-7549-4743-94e6-d64278e45b46">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="e94bb75c-7f53-42a7-9f97-eb5aa3fcaf53">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b2abf588-b45c-4e44-9dd0-8b2249bbc4e7">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="5322014d-43c7-4904-af96-4329a0290c25">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="495bcf82-3dfa-4956-b162-f0b1bfb07f10">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="feba3ebd-aeec-4c25-8b24-4b9e406c22cb">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b3e5490d-8b80-49fe-97a2-a82077345345">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a98aa22f-37cb-4a0e-84c6-f2de81903489">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="fetchResponse" id="44224014-88c9-46a3-ad15-e8ad20824167">
    <con:settings/>
    <con:config>
      <script>//fetch the REST response
import groovy.json.JsonSlurper
import groovy.json.JsonOutput


def restResponse = context.expand( '${group-shells|Traditional - TO - SOME-Before#Response}' );
def restResponse2 = new JsonSlurper().parseText(restResponse);
def prettyJson = new groovy.json.JsonBuilder(restResponse2).toPrettyString();</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="setFolderDirectory" id="b0410794-1cab-4f08-8e10-6b8f000e61af">
    <con:settings/>
    <con:config>
      <script>//set folder directory for storing the response

String osType = System.properties['os.name'][0..6];
def directory = "";
String jsonFileName = "group-shells-Traditional-TO-SOME.json"

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsResponseBeforeMigration/" + jsonFileName
	}
else{
	directory = "/Applications/VPS_JSON/vpsResponseBeforeMigration/" + jsonFileName // to insert directory for mac
	}</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="datasink" name="storeResponse" id="b3a6d298-78c2-4929-b414-43998e8d20bc">
    <con:settings/>
    <con:config xsi:type="con:DataSinkStep">
      <con:dataSink type="File">
        <con:configuration>
          <fileName>${setFolderDirectory#result}</fileName>
          <separator/>
          <escape/>
          <quote>false</quote>
          <trim>true</trim>
          <append>false</append>
          <encoding>UTF-8</encoding>
        </con:configuration>
      </con:dataSink>
      <con:properties>
        <con:property>
          <con:name>group-shells-Traditional-TO-SOME</con:name>
          <con:value>${fetchResponse#result}</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:properties/>
  <con:reportParameters/>
</con:testCase>
