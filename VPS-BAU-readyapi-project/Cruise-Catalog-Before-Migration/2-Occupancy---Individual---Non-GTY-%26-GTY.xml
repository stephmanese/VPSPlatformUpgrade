<?xml version="1.0" encoding="UTF-8"?>
<con:testCase xmlns:con="http://eviware.com/soapui/config" id="4ecb5aa2-397f-4095-a0e7-b834e55cbecd" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="2 Occupancy - Individual - Non GTY &amp; GTY" searchProperties="true" timeout="0">
  <con:settings id="27bb4c7e-50c1-472a-985f-89642096d869">
    <con:setting id="4ecb5aa2-397f-4095-a0e7-b834e55cbecdfileName">2-Occupancy---Individual---Non-GTY-%26-GTY</con:setting>
  </con:settings>
  <con:testStep type="groovy" name="loadTestData-royal" id="c5180500-915d-4368-bd08-3a1183d3f572">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from local source
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get user's device OS and set directory
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //directory for mac
	}

	
def testData = context.expand( '${#Project#testData-royal}' ) //modify this based on test case
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="setVariables" id="36449b9e-4faa-437d-8c68-be47c780c052">
    <con:settings/>
    <con:config>
      <script>//set variables from the fetched test data needed for the REST request
import groovy.json.JsonSlurper
import groovy.json.JsonOutput


def shipCode = context.expand( '${loadTestData-royal#result#$[\'royal\'][\'CO\'][\'shipCode\']}' )
log.info(shipCode);
testRunner.testCase.setPropertyValue("shipCode",shipCode);

def sailDate = context.expand( '${loadTestData-royal#result#$[\'royal\'][\'CO\'][\'sailDate\']}' )
log.info(sailDate);
testRunner.testCase.setPropertyValue("sailDate",sailDate);</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="2 Occupancy - Individual - Non GTY &amp; GTY-Before" id="577d3b0f-6d9d-4916-b2d5-9a22ed6a9f87">
    <con:settings/>
    <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" service="CruiseCatalog-CategoryAvailability" resourcePath="/v1/categoryAvailability" methodName="categoryAvailability" xsi:type="con:RestRequestStep">
      <con:restRequest name="2 Occupancy - Individual - Non GTY &amp; GTY-Before" id="f8599339-59a8-4e00-84ab-5480a7de1d85" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="Content-Type" value="application/json" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:request>{
	"shipCode": "${#TestCase#shipCode}",
	"sailDate": "${#TestCase#sailDate}",
	"bookingType": "I",
	"occupancy": 2,
	"summaryOnly": true
}</con:request>
        <con:originalUri>http://vps.rccl.com/vps-echo/categoryAvailability/v1/categoryAvailability</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="3a435416-8006-489f-859d-cbfeeca0d4ce" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="b844f3f2-908e-4ca0-9a6b-73b22f426a6e" name="Script Assertion">
          <con:configuration>
            <scriptText>def jsonRes = messageExchange.getResponse().contentAsString

def jsonSlurper = new groovy.json.JsonSlurper();
def parse = jsonSlurper.parseText(jsonRes)

def shipCode = parse.categoryAvailabilities[0].shipCode
log.info shipCode
assert shipCode == "NV"

def sailDate = parse.categoryAvailabilities[0].sailDate
log.info sailDate
assert sailDate == 20250103

def occupancy = parse.categoryAvailabilities[0].occupancy
log.info occupancy
assert occupancy == 2

def bookingType = parse.categoryAvailabilities[0].bookingType
log.info bookingType
assert bookingType == "I"</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="9ba133c3-3cd7-45c8-8561-64ce1c92ea67">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="015736b2-7549-4743-94e6-d64278e45b46">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="e94bb75c-7f53-42a7-9f97-eb5aa3fcaf53">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b2abf588-b45c-4e44-9dd0-8b2249bbc4e7">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="5322014d-43c7-4904-af96-4329a0290c25">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="495bcf82-3dfa-4956-b162-f0b1bfb07f10">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="feba3ebd-aeec-4c25-8b24-4b9e406c22cb">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b3e5490d-8b80-49fe-97a2-a82077345345">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a98aa22f-37cb-4a0e-84c6-f2de81903489">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="fetchResponse" id="b827e86e-c0d8-48a7-97d1-9390520eb333">
    <con:settings/>
    <con:config>
      <script>//fetch the REST response
import groovy.json.JsonSlurper
import groovy.json.JsonOutput


def restResponse = context.expand( '${2 Occupancy - Individual - Non GTY &amp; GTY-Before#Response}' ); //modify this based on test case
def restResponse2 = new JsonSlurper().parseText(restResponse);
def prettyJson = new groovy.json.JsonBuilder(restResponse2).toPrettyString();</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="setFolderDirectory" id="95d1e56f-8073-4f4e-94b6-523b09b9460a">
    <con:settings/>
    <con:config>
      <script>//set folder directory for storing the response and create json file for storing REST response

String osType = System.properties['os.name'][0..6];
def directory = "";
String jsonFileName = "2Occupancy-Individual-NonGTYandGTY.json" //modify this based on test case

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsResponseBeforeMigration/" + jsonFileName
	}
else{
	directory = "/Applications/VPS_JSON/vpsResponseBeforeMigration/" + jsonFileName // directory for mac
	}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="datasink" name="storeResponse" id="efe71c7e-b308-4c73-86d7-9a7f324a8322">
    <con:settings/>
    <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:DataSinkStep">
      <con:dataSink type="File">
        <con:configuration>
          <fileName>${setFolderDirectory#result}</fileName>
          <separator/>
          <escape/>
          <quote>false</quote>
          <trim>true</trim>
          <append>false</append>
          <encoding>UTF-8</encoding>
        </con:configuration>
      </con:dataSink>
      <con:properties>
        <con:property>
          <con:name>2 Occupancy - Individual - Non GTY &amp; GTY</con:name>
          <con:value>${fetchResponse#result}</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>shipCode</con:name>
      <con:value>NV</con:value>
    </con:property>
    <con:property>
      <con:name>sailDate</con:name>
      <con:value>20250103</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
</con:testCase>
