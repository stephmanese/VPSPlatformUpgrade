<?xml version="1.0" encoding="UTF-8"?>
<con:testCase xmlns:con="http://eviware.com/soapui/config" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="35a34431-077f-4c62-b6e8-e7da50695d2b" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="CategoryPricing-POST|Celebrity-withpromocode(Eligiblepromotion)" searchProperties="true" timeout="0" disabled="true">
  <con:settings id="0e28eeb9-f927-44ea-adf6-3105a0452358">
    <con:setting id="35a34431-077f-4c62-b6e8-e7da50695d2bfileName">CategoryPricing-POST%7CCelebrity-withpromocode%28Eligiblepromotion%29</con:setting>
  </con:settings>
  <con:testStep type="groovy" name="loadTestData-celebrity" id="30debb59-0bb9-4d89-8cb8-9ec1668b45c4">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-celebrity}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="loadTestData-market" id="c00c0fc6-28fb-4bed-85f7-5793d5bb90f6">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-market}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="setVariables" id="6536bb49-8346-4b3b-ad34-bec7374ee4d3">
    <con:settings/>
    <con:config>
      <script>//set variables from the fetched test data needed for the REST request
import groovy.json.JsonSlurper
import groovy.json.JsonOutput


//get data from TestData-celebrity
def brand = context.expand( '${loadTestData-celebrity#result#$[\'celebrity\'][\'brandCode\']}' )
log.info(brand);
testRunner.testCase.setPropertyValue("brand",brand);

def ship = context.expand( '${loadTestData-celebrity#result#$[\'celebrity\'][\'nonGalapagos\'][\'CO\'][\'shipCode\']}' )
log.info(ship);
testRunner.testCase.setPropertyValue("ship",ship);

def packageId = context.expand( '${loadTestData-celebrity#result#$[\'celebrity\'][\'nonGalapagos\'][\'CO\'][\'packageCode\']}' )
log.info(packageId);
testRunner.testCase.setPropertyValue("packageId",packageId);

def sailDate_ISO = context.expand( '${loadTestData-celebrity#result#$[\'celebrity\'][\'nonGalapagos\'][\'CO\'][\'sailDate-ISO\']}' )
log.info(sailDate_ISO);
testRunner.testCase.setPropertyValue("sailDate_ISO",sailDate_ISO);

def promoCode = context.expand( '${loadTestData-celebrity#result#$[\'celebrity\'][\'nonGalapagos\'][\'CO\'][\'promotionGuestQualifier\'][\'promoCodes\'][0]}' )
log.info(promoCode);
testRunner.testCase.setPropertyValue("promoCode",promoCode);

//get data from TestData-market
def office = context.expand( '${loadTestData-market#result#$[\'market\'][\'USA\'][\'officeCode\']}' )
log.info(office);
testRunner.testCase.setPropertyValue("office",office);

def country = context.expand( '${loadTestData-market#result#$[\'market\'][\'USA\'][\'countryCode\']}' )
log.info(country);
testRunner.testCase.setPropertyValue("country",country);

def currency = context.expand( '${loadTestData-market#result#$[\'market\'][\'USA\'][\'currencyCode\']}' )
log.info(currency);
testRunner.testCase.setPropertyValue("currency",currency);</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="CategoryPricing-POST|Celebrity-withpromocode(Eligiblepromotion)-Before" id="266c818f-aa38-4b8a-85c3-8cee3511b140">
    <con:settings/>
    <con:config service="Vacation(Ingress)" resourcePath="/v1/category-pricing" methodName="category-pricing" xsi:type="con:RestRequestStep">
      <con:restRequest name="CategoryPricing-POST|Celebrity-withpromocode(Eligiblepromotion)-Before" id="7ef9b40d-f536-40a4-8e7a-56952482dc3e" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:request>{
	"header": {
		"application": "celebritycruises.com",
		"language": "en_US"
	},
	"criteria": {
		"office": "${#TestCase#office}",
		"country": "${#TestCase#country}",
		"currency": "${#TestCase#currency}",
		"channel": "ES",
		"bookingType": "FIT",
		"packageId": "${#TestCase#packageId}",
		"sailingDate": {
			"date": [
				"${#TestCase#sailDate_ISO}"
			]
		},
		"occupancy": {
			"adult": 2
		}
	},
	"qualifiers": {
		"offersType": {
			"promoCodes": [
				"${#TestCase#promoCode}"
			],
			"strictPricingFlag": true
		}
	},
	"resultsPreference": {
		"priceLevel": {
			"bestPricedCategory": false
		}
	}
}</con:request>
        <con:originalUri>http://vps-stg-a.rccl.com/vps-sierra/vacation/v1/category-pricing</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="debec626-f487-484f-8867-3d8640de080e" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="36db0b56-8327-43df-9e0a-4098110ec02e" name="Script Assertion">
          <con:configuration>
            <scriptText>//fetching response
def jsonRes = messageExchange.getResponse().contentAsString

def jsonSlurper = new groovy.json.JsonSlurper();
def parse = jsonSlurper.parseText(jsonRes)

def categoryPricing = parse.results.categoryPricing[0]
log.info(categoryPricing)


//assertion
assert categoryPricing != null</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="9ba133c3-3cd7-45c8-8561-64ce1c92ea67">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="015736b2-7549-4743-94e6-d64278e45b46">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="e94bb75c-7f53-42a7-9f97-eb5aa3fcaf53">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b2abf588-b45c-4e44-9dd0-8b2249bbc4e7">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="5322014d-43c7-4904-af96-4329a0290c25">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="495bcf82-3dfa-4956-b162-f0b1bfb07f10">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="feba3ebd-aeec-4c25-8b24-4b9e406c22cb">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b3e5490d-8b80-49fe-97a2-a82077345345">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a98aa22f-37cb-4a0e-84c6-f2de81903489">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="fetchResponse" id="67291e1b-9881-44b0-b022-45a71883f9b5">
    <con:settings/>
    <con:config>
      <script>//fetch the REST response
import groovy.json.JsonSlurper
import groovy.json.JsonOutput


def restResponse = context.expand( '${CategoryPricing-POST|Celebrity-withpromocode(Eligiblepromotion)-Before#Response}' );
def restResponse2 = new JsonSlurper().parseText(restResponse);
def prettyJson = new groovy.json.JsonBuilder(restResponse2).toPrettyString();</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="setFolderDirectory" id="671bd4e3-22f6-42d2-9436-3d3f72602773">
    <con:settings/>
    <con:config>
      <script>//set folder directory for storing the response

String osType = System.properties['os.name'][0..6];
def directory = "";
String jsonFileName = "CategoryPricing-POST-Celebrity-withpromocode-Eligiblepromotion.json"

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsResponseBeforeMigration/" + jsonFileName
	}
else{
	directory = "/Applications/VPS_JSON/vpsResponseBeforeMigration/" + jsonFileName // to insert directory for mac
	}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="datasink" name="storeResponse" id="519a5a0a-9165-4251-8ce1-6728d75c58a9">
    <con:settings/>
    <con:config xsi:type="con:DataSinkStep">
      <con:dataSink type="File">
        <con:configuration>
          <fileName>${setFolderDirectory#result}</fileName>
          <separator/>
          <escape/>
          <quote>false</quote>
          <trim>true</trim>
          <append>false</append>
          <encoding>UTF-8</encoding>
        </con:configuration>
      </con:dataSink>
      <con:properties>
        <con:property>
          <con:name>CategoryPricing-POST-Celebrity-withpromocode-Eligiblepromotion</con:name>
          <con:value>${fetchResponse#result}</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>brand</con:name>
      <con:value>C</con:value>
    </con:property>
    <con:property>
      <con:name>ship</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>packageId</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>sailDate_ISO</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>promoCode</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>office</con:name>
      <con:value>MIA</con:value>
    </con:property>
    <con:property>
      <con:name>country</con:name>
      <con:value>USA</con:value>
    </con:property>
    <con:property>
      <con:name>currency</con:name>
      <con:value>USD</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
</con:testCase>
