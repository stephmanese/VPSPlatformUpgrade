<?xml version="1.0" encoding="UTF-8"?>
<con:testCase xmlns:con="http://eviware.com/soapui/config" id="9bdff8c2-ec67-4383-9fbe-a60e1d5bd450" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="FareSearch-POST|Promo-ExcludeBestRate" searchProperties="true" timeout="0" disabled="true">
  <con:settings id="6b3f3d76-ff9a-4311-9c75-4ee34b42e8d4">
    <con:setting id="9bdff8c2-ec67-4383-9fbe-a60e1d5bd450fileName">FareSearch-POST%7CPromo-ExcludeBestRate</con:setting>
  </con:settings>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="loadTestData-royal" id="aec74bf7-16e9-4d64-8d17-a79c716a8995">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-royal}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="loadTestData-promoSpecifScenario" id="668ed2e7-3016-408a-b52f-62e88890602d">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-promoSpecifScenario}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="loadTestData-market" id="a9dd856a-29d9-46f8-847e-ba076b1e77a5">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-market}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="setVariables" id="8227af62-af99-4b9a-9483-3b82611ff93b">
    <con:settings/>
    <con:config>
      <script>//set variables from the fetched test data needed for the REST request
import groovy.json.JsonSlurper
import groovy.json.JsonOutput


//get data from TestData-royal
def brand = context.expand( '${loadTestData-royal#result#$[\'royal\'][\'brandCode\']}' )
log.info(brand);
testRunner.testCase.setPropertyValue("brand",brand);

//get data from TestData-promoSpecifScenario
def ship = context.expand( '${loadTestData-promoSpecifScenario#result#$[\'promoSpecifScenario\'][\'nonTO\'][\'force\'][\'shipCode\']}' )
log.info(ship);
testRunner.testCase.setPropertyValue("ship",ship);

def packageId = context.expand( '${loadTestData-promoSpecifScenario#result#$[\'promoSpecifScenario\'][\'nonTO\'][\'force\'][\'packageCode\']}' )
log.info(packageId);
testRunner.testCase.setPropertyValue("packageId",packageId);

def sailDate_ISO = context.expand( '${loadTestData-promoSpecifScenario#result#$[\'promoSpecifScenario\'][\'nonTO\'][\'force\'][\'fromSailDate\']}' ) // no test data for sailDate-ISO, used fromSailDate instead
log.info(sailDate_ISO);
testRunner.testCase.setPropertyValue("sailDate_ISO",sailDate_ISO);

def promoId = context.expand( '${loadTestData-promoSpecifScenario#result#$[\'promoSpecifScenario\'][\'nonTO\'][\'force\'][\'promoId\']}' )
log.info(promoId);
testRunner.testCase.setPropertyValue("promoId",promoId);

def promoCode = context.expand( '${loadTestData-promoSpecifScenario#result#$[\'promoSpecifScenario\'][\'nonTO\'][\'force\'][\'promoCodes\'][0]}' ) // no test data for promo code
log.info(promoCode);
testRunner.testCase.setPropertyValue("promoCode",promoCode);

//get data from TestData-market
def office = context.expand( '${loadTestData-market#result#$[\'market\'][\'USA\'][\'officeCode\']}' )
log.info(office);
testRunner.testCase.setPropertyValue("office",office);

def country = context.expand( '${loadTestData-market#result#$[\'market\'][\'USA\'][\'countryCode\']}' )
log.info(country);
testRunner.testCase.setPropertyValue("country",country);

def currency = context.expand( '${loadTestData-market#result#$[\'market\'][\'USA\'][\'currencyCode\']}' )
log.info(currency);
testRunner.testCase.setPropertyValue("currency",currency);</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="restrequest" name="FareSearch-POST|Promo-ExcludeBestRate-Before" id="c4e1cb65-6496-4502-aaf2-cbbd92d43af6">
    <con:settings/>
    <con:config service="Vacation(Ingress)" resourcePath="/v1/fare-search" methodName="fare-search" xsi:type="con:RestRequestStep">
      <con:restRequest name="FareSearch-POST|Promo-ExcludeBestRate-Before" id="dfa731a1-71b9-4f12-893a-9c2f88fd830c" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:request>{
	"header": {
		"application": "royalcaribbean.com",
		"language": "US"
	},
	"criteria": {
		"office": "${#TestCase#office}",
		"country": "${#TestCase#country}",
		"currency": "${#TestCase#currency}",
		"channel": "VP",
		"bookingType": "FIT",
		"cruiseType": {
			"value": [
				"CO"
			]
		},
		"brand": {
			"value": [
				"${#TestCase#brand}"
			]
		},
		"ship": {
			"value": [
				"${#TestCase#ship}"
			]
		},
		"packageId": {
			"value": [
				"${#TestCase#packageId}"
			]
		},
		"sailingDate": {
			"date": [
				"${#TestCase#sailDate_ISO}"
			]
		},
		"occupancy": {
			"adult": 2,
			"child": 0,
			"infant": 0
		},
		"accessibleCabins": false
	},
	"qualifiers": {
		"promotionId": {
			"value": [
				"${#TestCase#promoId}"
			]
		},
		"offersType": {
			"promoCodes": [
				"${#TestCase#promoCode}"
			],
			"strictPricingFlag": true
		}
	},
	"resultsPreference": {
		"groupBy": "PACKAGE",
		"strictSearch": true,
		"includeOnlyIfPriceAvailable": true,
		"pagination": {
			"count": 10,
			"offset": 0
		}
	}
}</con:request>
        <con:assertion type="Valid HTTP Status Codes" id="c0e4c2a8-632b-48b5-abfc-91bdda1365b5" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="129dfcba-a06c-41c2-addc-b53f0b093dcb" name="Script Assertion">
          <con:configuration>
            <scriptText>//fetching request data
def request_packageId = context.expand( '${#TestCase#packageId}' )
log.info(request_packageId)

def request_sailDate = context.expand( '${#TestCase#sailDate_ISO}' )
log.info(request_sailDate)

//fetching response
def jsonRes = messageExchange.getResponse().contentAsString

def jsonSlurper = new groovy.json.JsonSlurper();
def parse = jsonSlurper.parseText(jsonRes)

def response_packageId = parse.resultsByPackage.packageSummaryWithClassLevelPricing[0].packageReference.code
log.info(response_packageId)

def response_sailDate = parse.resultsByPackage.packageSummaryWithClassLevelPricing[0].cabinClassPriceBySailing[0].sailingRef.saildate
log.info(response_sailDate)


def packageSummaryWithClassLevelPricing = parse.resultsByPackage.packageSummaryWithClassLevelPricing[0]
log.info(packageSummaryWithClassLevelPricing)

//assertion
assert request_packageId == response_packageId
assert request_sailDate == response_sailDate
assert packageSummaryWithClassLevelPricing != null</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="9ba133c3-3cd7-45c8-8561-64ce1c92ea67">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="015736b2-7549-4743-94e6-d64278e45b46">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="e94bb75c-7f53-42a7-9f97-eb5aa3fcaf53">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b2abf588-b45c-4e44-9dd0-8b2249bbc4e7">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="5322014d-43c7-4904-af96-4329a0290c25">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="495bcf82-3dfa-4956-b162-f0b1bfb07f10">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="feba3ebd-aeec-4c25-8b24-4b9e406c22cb">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b3e5490d-8b80-49fe-97a2-a82077345345">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a98aa22f-37cb-4a0e-84c6-f2de81903489">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="fetchResponse" id="54e6d2c5-d452-431a-ae36-f5f552807e41">
    <con:settings/>
    <con:config>
      <script>//fetch the REST response
import groovy.json.JsonSlurper
import groovy.json.JsonOutput


def restResponse = context.expand( '${FareSearch-POST|Promo-ExcludeBestRate-Before#Response}' );
def restResponse2 = new JsonSlurper().parseText(restResponse);
def prettyJson = new groovy.json.JsonBuilder(restResponse2).toPrettyString();</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="setFolderDirectory" id="8a8f2333-c961-492e-a722-66952b704050">
    <con:settings/>
    <con:config>
      <script>//set folder directory for storing the response

String osType = System.properties['os.name'][0..6];
def directory = "";
String jsonFileName = "FareSearch-POST-Promo-ExcludeBestRate.json"

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsResponseBeforeMigration/" + jsonFileName
	}
else{
	directory = "/Applications/VPS_JSON/vpsResponseBeforeMigration/" + jsonFileName // to insert directory for mac
	}</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="datasink" name="storeResponse" id="043ecaa6-aa53-48f2-8a42-c59cfbdc371a">
    <con:settings/>
    <con:config xsi:type="con:DataSinkStep">
      <con:dataSink type="File">
        <con:configuration>
          <fileName>${setFolderDirectory#result}</fileName>
          <separator/>
          <escape/>
          <quote>false</quote>
          <trim>true</trim>
          <append>false</append>
          <encoding>UTF-8</encoding>
        </con:configuration>
      </con:dataSink>
      <con:properties>
        <con:property>
          <con:name>FareSearch-POST-Promo-ExcludeBestRate</con:name>
          <con:value>${fetchResponse#result}</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:properties/>
  <con:reportParameters/>
</con:testCase>
