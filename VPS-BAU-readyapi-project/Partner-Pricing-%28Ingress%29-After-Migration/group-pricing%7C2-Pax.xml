<?xml version="1.0" encoding="UTF-8"?>
<con:testCase xmlns:con="http://eviware.com/soapui/config" id="a93824d4-9973-4bf6-8067-57c6cd7917e6" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="group-pricing|2 Pax" searchProperties="true" timeout="0">
  <con:settings id="bdb6be79-b98a-46c3-8d19-c06b0554843e">
    <con:setting id="a93824d4-9973-4bf6-8067-57c6cd7917e6fileName">group-pricing%7C2-Pax</con:setting>
  </con:settings>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="loadTestData-groupShell" id="1063c107-4406-41b9-a63a-2bd0e3cd3be7">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-groupShell}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="loadTestData-guestPreferences" id="d3190fd3-0dec-4a64-9d8e-bcfa59013ed3">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-guestPreferences}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="setVariables" id="67f70a24-fcc2-4d2f-a422-1b26971f4053">
    <con:settings/>
    <con:config>
      <script>//set variables from the fetched test data needed for the REST request
import groovy.json.JsonSlurper
import groovy.json.JsonOutput


//get data from TestData-groupShell
def clientId = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'occupancy\'][\'2Pax\'][\'ownerAgencyId\']}' )
log.info(clientId);
testRunner.testCase.setPropertyValue("clientId",clientId);

def brand = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'occupancy\'][\'2Pax\'][\'brand\']}' )
log.info(brand);
testRunner.testCase.setPropertyValue("brand",brand);

def sailDate_ISO = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'occupancy\'][\'2Pax\'][\'sailDate-ISO\']}' )
log.info(sailDate_ISO);
testRunner.testCase.setPropertyValue("sailDate_ISO",sailDate_ISO);

def shipCode = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'occupancy\'][\'2Pax\'][\'ship\']}' )
log.info(shipCode);
testRunner.testCase.setPropertyValue("shipCode",shipCode);

def packageCode =context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'occupancy\'][\'2Pax\'][\'packageCode\']}' )
log.info(packageCode);
testRunner.testCase.setPropertyValue("packageCode",packageCode);

def officeCode = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'occupancy\'][\'2Pax\'][\'officeCode\']}' )
log.info(officeCode);
testRunner.testCase.setPropertyValue("officeCode",officeCode);

def countryCode = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'occupancy\'][\'2Pax\'][\'countryCode\']}' )
log.info(countryCode);
testRunner.testCase.setPropertyValue("countryCode",countryCode);

def currencyCode = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'occupancy\'][\'2Pax\'][\'currencyCode\']}' )
log.info(currencyCode);
testRunner.testCase.setPropertyValue("currencyCode",currencyCode);

//get data from TestData-guestPreferences
def lifeStageCode = context.expand( '${loadTestData-guestPreferences#result#$[\'guestPreferences\'][0][\'lifeStageCode\']}' )
log.info(lifeStageCode);
testRunner.testCase.setPropertyValue("lifeStageCode",lifeStageCode);

def guestAge = context.expand( '${loadTestData-guestPreferences#result#$[\'guestPreferences\'][0][\'age\']}' )
log.info(guestAge);
testRunner.testCase.setPropertyValue("guestAge",guestAge);</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="restrequest" name="group-pricing|2 Pax-After" id="69fa1eb9-a5fb-4de4-9657-b03666e0ac16">
    <con:settings/>
    <con:config service="Partner Pricing(Ingress)" resourcePath="/v1/group-pricing" methodName="group-pricing" xsi:type="con:RestRequestStep">
      <con:restRequest name="group-pricing|2 Pax-After" id="d412c3da-2e84-488c-8aac-7b80f15df79a" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:request>{
	"clients": [
		{
			"clientContext": "AGENCY_1",
			"clientId": "178102"
		}
	],
	"companyShortName": "TEST",
	"bookingChannel": "ES",
	"brandCode": "${#TestCase#brand}",
	"shipCode": "${#TestCase#shipCode}",
	"sailDate": "${#TestCase#sailDate_ISO}",
	"packageCode": "${#TestCase#packageCode}",
	"officeCode": "${#TestCase#officeCode}",
	"countryCode": "${#TestCase#countryCode}",
	"currencyCode": "${#TestCase#currencyCode}",
	"occupancy": 2,
	"bookingTypeCode": "G",
	"pricingPreference": {
		"includeGuestLevelDetail": true,
		"includeGratuity": true
	},
	"guestPreferences": [
		{
			"lifeStageCode": "${#TestCase#lifeStageCode}",
			"age": "${#TestCase#guestAge}"
		},
		{
			"lifeStageCode": "${#TestCase#lifeStageCode}",
			"age": "${#TestCase#guestAge}"
		}
	]
}</con:request>
        <con:originalUri>http://vps.rccl.com/vps/partner-pricing/v1/group-pricing</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="28510e0f-1a68-4373-a8ac-61f132efab6a" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="626ad771-445d-4dfd-b4c7-a04841eb53f8" name="Script Assertion">
          <con:configuration>
            <scriptText>def jsonRes = messageExchange.getResponse().contentAsString

def jsonSlurper = new groovy.json.JsonSlurper();
def parse = jsonSlurper.parseText(jsonRes)

def groupBestPrices = parse.groupBestPrices[0]
log.info groupBestPrices
assert groupBestPrices != null</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="9ba133c3-3cd7-45c8-8561-64ce1c92ea67">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="015736b2-7549-4743-94e6-d64278e45b46">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="e94bb75c-7f53-42a7-9f97-eb5aa3fcaf53">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b2abf588-b45c-4e44-9dd0-8b2249bbc4e7">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="5322014d-43c7-4904-af96-4329a0290c25">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="495bcf82-3dfa-4956-b162-f0b1bfb07f10">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="feba3ebd-aeec-4c25-8b24-4b9e406c22cb">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b3e5490d-8b80-49fe-97a2-a82077345345">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a98aa22f-37cb-4a0e-84c6-f2de81903489">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="compareResponse" id="e54e6bf0-8a87-48c6-9ff5-670e1fb7cde3">
    <con:settings/>
    <con:config>
      <script>import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsResponseBeforeMigration/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsResponseBeforeMigration/" //directory for mac
	}

//for response before migration
def filePath = directory + "group-pricing-2-Pax.json"; // Retrieving JSON response from a text file
def jsonObject1 = new JsonSlurper().parseText(new File(filePath).text); // Parsing JSON response into JSON objects
jsonObject1.status.remove("dateTime"); //Removing specific elements from the JSON objects
jsonObject1.metaInfo.remove("effectiveDateTime");
def refStr = new groovy.json.JsonBuilder(jsonObject1).toPrettyString(); // Converting JSON objects back to pretty-printed JSON strings

refStr = refStr.replaceAll('}', '');   // without this, there is a close brace whose result is only differentiated by its existance
refStr = refStr.replaceAll(',', '');
def refStrList = refStr.split(); // Splitting strings into lists and sorting them
def refStrListSorted = refStrList.sort(); 

//for response after migration
def jsonString2 = context.expand( '${group-pricing|2 Pax-After#Response}' );
def jsonObject2 = new groovy.json.JsonSlurper().parseText(jsonString2);
jsonObject2.status.remove("dateTime");
jsonObject2.metaInfo.remove("effectiveDateTime");
def compStr = new groovy.json.JsonBuilder(jsonObject2).toPrettyString();

compStr = compStr.replaceAll('}', '');  // without this, there is a close brace whose result is only differentiated by its existance
compStr = compStr.replaceAll(',', '');
def compStrList = compStr.split();
def compStrListSorted = compStrList.sort();

// Sanity check to ensure both lists have the same size
log.info "refStrList.size()=" + refStrList.size();
log.info "compStrList.size()=" + compStrList.size();
assert refStrList.size().equals(compStrList.size()), "Mismatch - There are ${refStrList.size()} reference values and ${compStrList.size()} compare values";

// sorted line by sorted line check...
refStrListSorted.eachWithIndex { refValue, idx ->
   def compValue = compStrListSorted[idx];
   if ( refValue != compValue ) {
      log.info "refValue=" + refValue + "  " + idx;
      log.info "compValue=" + compValue + "  " + idx;
      assert refValue.equals(compValue), "Mismatch - At index $idx the reference value '$refValue' does not match the comparison value '$compValue'";
   };
};

// If we get here, then the contents are equal
log.info "";
log.info "   ***  Reference and Compare strings are equal  ***";

log.info "";
log.info 'Test Step "' + testRunner.runContext.currentStep.name + '" done...';</script>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>clientId</con:name>
      <con:value>97466</con:value>
    </con:property>
    <con:property>
      <con:name>brand</con:name>
      <con:value>C</con:value>
    </con:property>
    <con:property>
      <con:name>sailDate_ISO</con:name>
      <con:value>2025-01-11</con:value>
    </con:property>
    <con:property>
      <con:name>shipCode</con:name>
      <con:value>EC</con:value>
    </con:property>
    <con:property>
      <con:name>packageCode</con:name>
      <con:value>EC09E046</con:value>
    </con:property>
    <con:property>
      <con:name>officeCode</con:name>
      <con:value>OSL</con:value>
    </con:property>
    <con:property>
      <con:name>countryCode</con:name>
      <con:value>SWE</con:value>
    </con:property>
    <con:property>
      <con:name>currencyCode</con:name>
      <con:value>SEK</con:value>
    </con:property>
    <con:property>
      <con:name>lifeStageCode</con:name>
      <con:value>A</con:value>
    </con:property>
    <con:property>
      <con:name>guestAge</con:name>
      <con:value>45</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
</con:testCase>
