<?xml version="1.0" encoding="UTF-8"?>
<con:testCase xmlns:con="http://eviware.com/soapui/config" id="f49718e9-3435-46ea-8acb-8cf3fd690938" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="group-shells|Traditional - HQ - SOME" searchProperties="true" timeout="0" disabled="true">
  <con:settings id="1f0e82b4-2889-4b85-a4ce-b2267f8a115d">
    <con:setting id="f49718e9-3435-46ea-8acb-8cf3fd690938fileName">group-shells%7CTraditional---HQ---SOME</con:setting>
  </con:settings>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="loadTestData-groupShell" id="0caa166f-b2cb-4879-884c-c965f55a2aea">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-groupShell}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="setVariables" id="ff991bf3-3639-47b6-99b2-b07a862d91dd">
    <con:settings/>
    <con:config>
      <script>//set variables from the fetched test data needed for the REST request
import groovy.json.JsonSlurper
import groovy.json.JsonOutput


//get data from TestData-groupShell
def agencyId = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'traditional\'][\'HQ\'][\'some\'][\'ownerAgencyId\']}' )
log.info(agencyId);
testRunner.testCase.setPropertyValue("agencyId",agencyId);

def masterHeadquarterId = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'traditional\'][\'HQ\'][\'some\'][\'ownerMasterHqId\']}' )
log.info(masterHeadquarterId);
testRunner.testCase.setPropertyValue("masterHeadquarterId",masterHeadquarterId);

def alternateHierarchyHQId = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'traditional\'][\'HQ\'][\'some\'][\'ownerAlternateHierarchyHqId\']}' )
log.info(alternateHierarchyHQId);
testRunner.testCase.setPropertyValue("alternateHierarchyHQId",alternateHierarchyHQId);

def commonOwnershipHQId = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'traditional\'][\'HQ\'][\'some\'][\'ownerCommonOwnershipHqId\']}' )
log.info(commonOwnershipHQId);
testRunner.testCase.setPropertyValue("commonOwnershipHQId",commonOwnershipHQId);

def sailDate = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'traditional\'][\'HQ\'][\'some\'][\'sailDate\']}' )
log.info(sailDate);
testRunner.testCase.setPropertyValue("sailDate",sailDate);

def packageCode = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'traditional\'][\'HQ\'][\'some\'][\'packageCode\']}' )
log.info(packageCode);
testRunner.testCase.setPropertyValue("packageCode",packageCode);

def shipCode = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'traditional\'][\'HQ\'][\'some\'][\'ship\']}' )
log.info(shipCode);
testRunner.testCase.setPropertyValue("shipCode",shipCode);

def countryCode = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'traditional\'][\'HQ\'][\'some\'][\'countryCode\']}' )
log.info(countryCode);
testRunner.testCase.setPropertyValue("countryCode",countryCode);

def currency = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'traditional\'][\'HQ\'][\'some\'][\'currencyCode\']}' )
log.info(currency);
testRunner.testCase.setPropertyValue("currency",currency);

def occupancy = context.expand( '${loadTestData-groupShell#result#$[\'groupShell\'][\'traditional\'][\'HQ\'][\'some\'][\'occupancy\']}' )
log.info(occupancy);
testRunner.testCase.setPropertyValue("occupancy",occupancy);</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="restrequest" name="group-shells|Traditional - HQ - SOME-After" id="782366c4-c291-4416-8b19-a50daa4d4706">
    <con:settings/>
    <con:config service="Group Shell" resourcePath="/v1/group-shells" methodName="group-shells" xsi:type="con:RestRequestStep">
      <con:restRequest name="group-shells|Traditional - HQ - SOME-After" id="dbb5d645-70f1-498c-a9f4-929fb7b26953" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:request>{
	"agencyId": "${#TestCase#agencyId}",
	"masterHeadquarterId": "${#TestCase#masterHeadquarterId}",
	"alternateHierarchyHQId": "${#TestCase#alternateHierarchyHQId}",
	"commonOwnershipHQId": "${#TestCase#commonOwnershipHQId}",
	"sailDate": "${#TestCase#sailDate}",
	"shipCode": "${#TestCase#shipCode}",
	"packageCode": "${#TestCase#packageCode}",
	"countryCode": "${#TestCase#countryCode}",
	"currency": "${#TestCase#currency}",
	"occupancy": "${#TestCase#occupancy}",
	"includeSoldOut": true
}</con:request>
        <con:assertion type="Valid HTTP Status Codes" id="a7306f1b-de0e-48ed-820c-c970eea1ed4d" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="dbdd9061-88b5-44bf-ab63-8c2fcd0646ac" name="Script Assertion">
          <con:configuration>
            <scriptText>def jsonRes = messageExchange.getResponse().contentAsString

def jsonSlurper = new groovy.json.JsonSlurper();
def parse = jsonSlurper.parseText(jsonRes)

def groupShells = parse.groupShells[0]
log.info groupShells
assert groupShells != null</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="9ba133c3-3cd7-45c8-8561-64ce1c92ea67">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="015736b2-7549-4743-94e6-d64278e45b46">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="e94bb75c-7f53-42a7-9f97-eb5aa3fcaf53">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b2abf588-b45c-4e44-9dd0-8b2249bbc4e7">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="5322014d-43c7-4904-af96-4329a0290c25">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="495bcf82-3dfa-4956-b162-f0b1bfb07f10">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="feba3ebd-aeec-4c25-8b24-4b9e406c22cb">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b3e5490d-8b80-49fe-97a2-a82077345345">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a98aa22f-37cb-4a0e-84c6-f2de81903489">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="compareResponse" id="f1aed0da-149c-4042-bb0e-32a5fe0681f3">
    <con:settings/>
    <con:config>
      <script><![CDATA[//reference: https://support.smartbear.com/readyapi/faq/how-do-i-compare-two-dynamic-json-responses/
//compare before and after migration response
import groovy.json.*
import com.eviware.soapui.support.JsonPathValueNode
import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.databind.node.ArrayNode
import com.fasterxml.jackson.databind.node.ObjectNode
import com.jayway.jsonpath.Configuration
import com.jayway.jsonpath.JsonPath
import com.jayway.jsonpath.spi.json.JacksonJsonNodeJsonProvider
import com.jayway.jsonpath.spi.mapper.JacksonMappingProvider
import com.eviware.soapui.model.testsuite.*;

def responseIsSame = true  //flag for validation

//get user's device OS and set directory
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsResponseBeforeMigration/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsResponseBeforeMigration/" //directory for mac
	}



//baseline response
def filePath = directory + "group-shells-Traditional-HQ-SOME.json"
def baselineResp = new JsonSlurper().parseText(new File(filePath).text)
baselineResp.status.remove("dateTime")
//baselineResp.documentMetaData.remove("changeDateTime")
def modifiedBaselineResp = JsonOutput.toJson(baselineResp)

//current response
def currentJsonResp = context.expand('${group-shells|Traditional - HQ - SOME-After#Response}') 
def outputOfCurrentResp = new JsonSlurper().parseText(currentJsonResp)
outputOfCurrentResp.status.remove("dateTime")
//outputOfCurrentResp.documentMetaData.remove("changeDateTime")
def modifiedOutputOfCurrentResp = JsonOutput.toJson(outputOfCurrentResp)

log.info("Baseline Response: " + modifiedBaselineResp)
log.info("Output of CurrentResponse: " + modifiedOutputOfCurrentResp)

mapper = new ObjectMapper()
JsonNode responseBefore = mapper.readTree(modifiedBaselineResp);
JsonNode responseAfter = mapper.readTree(modifiedOutputOfCurrentResp);

Set<JsonPathValueNode> pathValues = listLeafValues(responseBefore, '$');
Set<JsonPathValueNode> pathValues2 = listLeafValues(responseAfter, '$');
Configuration configuration = Configuration.builder()
        .jsonProvider(new JacksonJsonNodeJsonProvider())
        .mappingProvider(new JacksonMappingProvider(mapper))
        .build();

pathValues.each {
    try {
        JsonPath jsonPath = JsonPath.compile(it.path);
        JsonNode result = jsonPath.read(responseAfter, configuration);
        
        if (result != it.valueNode) {
            log.info('Node with path ' + it.path + ' and value ' + it.valueNode + ' are not matched')
            responseIsSame = false
        }
    } catch (Exception e) {
        log.info('Node with path ' + it.path + ' and value ' + it.valueNode + ' are not matched')
        responseIsSame = false
    }
}

pathValues2.each {
    try {
        JsonPath jsonPath = JsonPath.compile(it.path);
        JsonNode result = jsonPath.read(responseBefore, configuration);
        
        if (result != it.valueNode) {
            log.info('Node with path ' + it.path + ' and value ' + it.valueNode + ' are not matched')
            responseIsSame = false
        }
    } catch (Exception e) {
        log.info('Node with path ' + it.path + ' and value ' + it.valueNode + ' are not matched')
        responseIsSame = false
    }
}

Set<JsonPathValueNode> listLeafValues(JsonNode jsonObject, String path) {
    if (jsonObject.isObject()) {
        return getValuesFrom((ObjectNode) jsonObject, path);
    } else if (jsonObject.isArray()) {
        return getValuesFrom((ArrayNode) jsonObject, path);
    } else {
    }
}

Set<JsonPathValueNode> getValuesFrom(ObjectNode jsonObject, String path) {
    Set<JsonPathValueNode> values = new LinkedHashSet<>();
    Iterator<Map.Entry<String, JsonNode>> fields = jsonObject.fields();
    while (fields.hasNext()) {
        Map.Entry<String, JsonNode> field = fields.next();
        JsonNode value = field.getValue();
        String nodePath = path + "." + field.getKey();
        addValue(values, value, nodePath);
    }
    return values;
}

Set<JsonPathValueNode> getValuesFrom(ArrayNode array, String nodePath) {
    Set<JsonPathValueNode> values = new LinkedHashSet<>();
    int index = 0;
    for (JsonNode value : array) {
        addValue(values, value, nodePath + "[" + index + "]");
        index++;
    }
    return values;
}

def addValue(Set<JsonPathValueNode> values, JsonNode value, String nodePath) {
    if (value.isObject()) {
        values.addAll(getValuesFrom((ObjectNode) value, nodePath));
    } else if (value.isArray()) {
        values.addAll(getValuesFrom((ArrayNode) value, nodePath));
    } else if (value.isValueNode()) {
        values.add(new JsonPathValueNode(nodePath, value));
    }
}

assert responseIsSame == true
log.info("Before Migration and After Migration Responses are matched")]]></script>
    </con:config>
  </con:testStep>
  <con:properties/>
  <con:reportParameters/>
</con:testCase>
