<?xml version="1.0" encoding="UTF-8"?>
<con:testCase xmlns:con="http://eviware.com/soapui/config" id="a22f1226-9810-4a8d-93f9-506b08ab5731" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="superCategoryBestPrices|C-CT-Galapagos" searchProperties="true" timeout="0" disabled="true">
  <con:settings id="d40b8425-426b-44dc-bae8-29192150c4ca">
    <con:setting id="a22f1226-9810-4a8d-93f9-506b08ab5731fileName">superCategoryBestPrices%7CC-CT-Galapagos</con:setting>
  </con:settings>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="loadTestData-celebrity" id="2c829e1c-0536-4d5e-ae48-bff51b636b5c">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-celebrity}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="loadTestData-guestPreferences" id="04444c19-706b-49fd-a1e7-c91ff56e3c67">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-guestPreferences}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="loadTestData-market" id="b7af9bde-4cf8-4186-9108-0327e57e5eb6">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-market}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="setVariables" id="0aec7bfa-bcfb-437e-81b1-bdd01ca8cbf2">
    <con:settings/>
    <con:config>
      <script>//set variables from the fetched test data needed for the REST request
import groovy.json.JsonSlurper
import groovy.json.JsonOutput


//get data from TestData-royal
def shipCode = context.expand( '${loadTestData-celebrity#result#$[\'celebrity\'][\'galapagos\'][\'CT\'][\'shipCode\']}' )
log.info(shipCode);
testRunner.testCase.setPropertyValue("shipCode",shipCode);

def sailDate = context.expand( '${loadTestData-celebrity#result#$[\'celebrity\'][\'galapagos\'][\'CT\'][\'sailDate\']}' )
log.info(sailDate);
testRunner.testCase.setPropertyValue("sailDate",sailDate);

def packageCode = context.expand( '${loadTestData-celebrity#result#$[\'celebrity\'][\'galapagos\'][\'CT\'][\'packageCode\']}' )
log.info(packageCode);
testRunner.testCase.setPropertyValue("packageCode",packageCode);


//get data from TestDate-market
def countryCode = context.expand( '${loadTestData-market#result#$[\'market\'][\'USA\'][\'countryCode\']}' )
log.info(countryCode);
testRunner.testCase.setPropertyValue("countryCode",countryCode);

def officeCode = context.expand( '${loadTestData-market#result#$[\'market\'][\'USA\'][\'officeCode\']}' )
log.info(officeCode);
testRunner.testCase.setPropertyValue("officeCode",officeCode);

def currencyCode = context.expand( '${loadTestData-market#result#$[\'market\'][\'USA\'][\'currencyCode\']}' )
log.info(currencyCode);
testRunner.testCase.setPropertyValue("currencyCode",currencyCode);

//get data from TestDate-guestPreferences
def lifeStageCode = context.expand( '${loadTestData-guestPreferences#result#$[\'guestPreferences\'][0][\'lifeStageCode\']}' )
log.info(lifeStageCode);
testRunner.testCase.setPropertyValue("lifeStageCode",lifeStageCode);

def guestAge = context.expand( '${loadTestData-guestPreferences#result#$[\'guestPreferences\'][0][\'age\']}' )
log.info(guestAge);
testRunner.testCase.setPropertyValue("guestAge",guestAge);</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="restrequest" name="superCategoryBestPrices|C-CT-Galapagos-After" id="8f8b7527-7f2e-44e0-a5a6-e5f4dad4b931">
    <con:settings/>
    <con:config service="Pricing" resourcePath="/v1/superCategoryBestPrices" methodName="superCategoryBestPrices" xsi:type="con:RestRequestStep">
      <con:restRequest name="superCategoryBestPrices|C-CT-Galapagos-After" id="693ae198-e8c7-443b-a27e-5b0956636488" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:request>{
	"commonParameters": {
		"shipCode": "${#TestCase#shipCode}",
		"sailDate": "${#TestCase#sailDate}",
		"packageCode": "${#TestCase#packageCode}",
		"bookingChannel": "ES",
		"officeCode": "${#TestCase#officeCode}",
		"countryCode": "${#TestCase#countryCode}",
		"currencyCode": "${#TestCase#currencyCode}",
		"bookingType": "I",
		"occupancy": 2
	},
	"showGuestDetail": true,
	"guestInformation": [
		{
			"lifeStageCode": "${#TestCase#lifeStageCode}",
			"guestAge": "${#TestCase#guestAge}"
		},
		{
			"lifeStageCode": "${#TestCase#lifeStageCode}",
			"guestAge": "${#TestCase#guestAge}"
		}
	]
}</con:request>
        <con:assertion type="Valid HTTP Status Codes" id="f76362f2-b120-4da6-a3b2-0321776ed513" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="c0ad6430-0b9d-4c0c-ad28-d37b49a84a93" name="Script Assertion">
          <con:configuration>
            <scriptText>def jsonRes = messageExchange.getResponse().contentAsString

def jsonSlurper = new groovy.json.JsonSlurper();
def parse = jsonSlurper.parseText(jsonRes)

def superCategoryBestPrice= parse.superCategoryBestPrice[0]
log.info superCategoryBestPrice
assert superCategoryBestPrice!= null</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="9ba133c3-3cd7-45c8-8561-64ce1c92ea67">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="015736b2-7549-4743-94e6-d64278e45b46">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="e94bb75c-7f53-42a7-9f97-eb5aa3fcaf53">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b2abf588-b45c-4e44-9dd0-8b2249bbc4e7">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="5322014d-43c7-4904-af96-4329a0290c25">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="495bcf82-3dfa-4956-b162-f0b1bfb07f10">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="feba3ebd-aeec-4c25-8b24-4b9e406c22cb">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b3e5490d-8b80-49fe-97a2-a82077345345">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a98aa22f-37cb-4a0e-84c6-f2de81903489">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="compareResponse" id="45ea277e-01d9-4c71-8f6a-21377afc6b19">
    <con:settings/>
    <con:config>
      <script>import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsResponseBeforeMigration/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsResponseBeforeMigration/" //to insert directory for mac
	}

//for response before migration
def filePath = directory + "superCategoryBestPrices-C-CT-Galapagos.json"; // Retrieving JSON response from a text file
def jsonObject1 = new JsonSlurper().parseText(new File(filePath).text); // Parsing JSON response into JSON objects
jsonObject1.status.remove("dateTime"); //Removing specific elements from the JSON objects
jsonObject1.commonParameters.remove("effectiveDateTime");
def refStr = new groovy.json.JsonBuilder(jsonObject1).toPrettyString(); // Converting JSON objects back to pretty-printed JSON strings

refStr = refStr.replaceAll('}', '');   // without this, there is a close brace whose result is only differentiated by its existance
refStr = refStr.replaceAll(',', '');
def refStrList = refStr.split(); // Splitting strings into lists and sorting them
def refStrListSorted = refStrList.sort(); 

//for response after migration
def jsonString2 = context.expand( '${superCategoryBestPrices|C-CT-Galapagos-After#Response}' );
def jsonObject2 = new groovy.json.JsonSlurper().parseText(jsonString2);
jsonObject2.status.remove("dateTime");
jsonObject2.commonParameters.remove("effectiveDateTime");
def compStr = new groovy.json.JsonBuilder(jsonObject2).toPrettyString();

compStr = compStr.replaceAll('}', '');  // without this, there is a close brace whose result is only differentiated by its existance
compStr = compStr.replaceAll(',', '');
def compStrList = compStr.split();
def compStrListSorted = compStrList.sort();

// Sanity check to ensure both lists have the same size
log.info "refStrList.size()=" + refStrList.size();
log.info "compStrList.size()=" + compStrList.size();
assert refStrList.size().equals(compStrList.size()), "Mismatch - There are ${refStrList.size()} reference values and ${compStrList.size()} compare values";

// sorted line by sorted line check...
refStrListSorted.eachWithIndex { refValue, idx ->
   def compValue = compStrListSorted[idx];
   if ( refValue != compValue ) {
      log.info "refValue=" + refValue + "  " + idx;
      log.info "compValue=" + compValue + "  " + idx;
      assert refValue.equals(compValue), "Mismatch - At index $idx the reference value '$refValue' does not match the comparison value '$compValue'";
   };
};

// If we get here, then the contents are equal
log.info "";
log.info "   ***  Reference and Compare strings are equal  ***";

log.info "";
log.info 'Test Step "' + testRunner.runContext.currentStep.name + '" done...';</script>
    </con:config>
  </con:testStep>
  <con:properties/>
  <con:reportParameters/>
</con:testCase>
