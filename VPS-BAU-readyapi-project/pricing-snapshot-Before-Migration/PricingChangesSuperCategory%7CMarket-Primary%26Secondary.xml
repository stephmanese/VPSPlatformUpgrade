<?xml version="1.0" encoding="UTF-8"?>
<con:testCase xmlns:con="http://eviware.com/soapui/config" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="5f0eb545-cfd4-4606-8444-62b1e9d8ad67" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PricingChangesSuperCategory|Market-Primary&amp;Secondary" searchProperties="true" timeout="0" disabled="true">
  <con:settings id="12bcb1c0-a21f-4b8e-af53-42d536d23275">
    <con:setting id="5f0eb545-cfd4-4606-8444-62b1e9d8ad67fileName">PricingChangesSuperCategory%7CMarket-Primary%26Secondary</con:setting>
  </con:settings>
  <con:testStep type="groovy" name="loadTestData-market" id="5c0fb01d-b4e9-4845-b32d-e063c8f90b07">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-market}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="setVariables" id="97b6c2fd-9180-4d6a-9b46-a5099a0cdb38">
    <con:settings/>
    <con:config>
      <script>//set variables from the fetched test data needed for the REST request
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import java.time.LocalDateTime

//to get the testData-market

def officeCode = context.expand( '${loadTestData-market#result#$[\'market\'][\'GBR\'][\'officeCode\']}' )
log.info(officeCode)
testRunner.testCase.setPropertyValue("officeCode",officeCode);

def countryCode = context.expand( '${loadTestData-market#result#$[\'market\'][\'GBR\'][\'countryCode\']}' )
log.info(countryCode)
testRunner.testCase.setPropertyValue("countryCode",countryCode);

def currencyCode1 = context.expand( '${loadTestData-market#result#$[\'market\'][\'GBR\'][\'currencyCodes\'][0]}' )
log.info(currencyCode1)
testRunner.testCase.setPropertyValue("currencyCode1",currencyCode1);

def currencyCode2 = context.expand( '${loadTestData-market#result#$[\'market\'][\'GBR\'][\'currencyCodes\'][1]}' )
log.info(currencyCode2)
testRunner.testCase.setPropertyValue("currencyCode2",currencyCode2);



//to Get the date and convert to TimeZone
Date dateTimeNow  = LocalDateTime.now().minusHours(47).toDate()
log.info(dateTimeNow)

def fromDateTime = dateTimeNow.format("yyyy-MM-dd'T'HH:mm:ss", TimeZone.getTimeZone('UTC'))
log.info(fromDateTime)
testRunner.testCase.setPropertyValue("fromDateTime",fromDateTime);</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="priceChanges-superCategoryBefore" id="f582de52-26f0-45d3-a5dd-c3811093c5f1">
    <con:settings/>
    <con:config service="Pricing-Snapshot" resourcePath="/v1/price-changes:super-category" methodName="price-changes:super-category" xsi:type="con:RestRequestStep">
      <con:restRequest name="priceChanges-superCategoryBefore" id="fb1ed1e0-0c8c-4b1a-92a3-fcccfc83f47a" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:request>{
  "market": {
    "officeCode": "${#TestCase#officeCode}",
    "countryCode": "${#TestCase#countryCode}",
    "currencyCodes": [
    "${#TestCase#currencyCode1}", "${#TestCase#currencyCode2}"
    ]
  },
    "fromDateTime": "${#TestCase#fromDateTime}"
}</con:request>
        <con:originalUri>http://vps-stg-a.rccl.com/vps-echo/pricing-snapshot/v1/price-changes:super-category</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="17d452b5-0651-40ca-aa7b-6d23c9ccbda3" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="7dff4ac5-074c-4f58-8fe3-8430312a5484">
          <con:configuration>
            <scriptText>def jsonRes = messageExchange.getResponse().contentAsString

def jsonSlurper = new groovy.json.JsonSlurper();
def parse = jsonSlurper.parseText(jsonRes)

def keys = parse.keys[0]
assert keys!=null</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="9ba133c3-3cd7-45c8-8561-64ce1c92ea67">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="015736b2-7549-4743-94e6-d64278e45b46">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="e94bb75c-7f53-42a7-9f97-eb5aa3fcaf53">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b2abf588-b45c-4e44-9dd0-8b2249bbc4e7">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="5322014d-43c7-4904-af96-4329a0290c25">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="495bcf82-3dfa-4956-b162-f0b1bfb07f10">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="feba3ebd-aeec-4c25-8b24-4b9e406c22cb">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b3e5490d-8b80-49fe-97a2-a82077345345">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a98aa22f-37cb-4a0e-84c6-f2de81903489">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="fetchResponse" id="828251cc-4e8b-46d9-a9ab-d6172f7ffbab">
    <con:settings/>
    <con:config>
      <script>//fetch the REST response
import groovy.json.JsonSlurper
import groovy.json.JsonOutput


def restResponse = context.expand( '${priceChanges-superCategoryBefore#Response}' );
def restResponse2 = new JsonSlurper().parseText(restResponse);
def prettyJson = new groovy.json.JsonBuilder(restResponse2).toPrettyString();</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="setFolderDirectory" id="fce74f3e-a7f8-4f1c-aa1e-ee318cee2d7e">
    <con:settings/>
    <con:config>
      <script>//set folder directory for storing the response

String osType = System.properties['os.name'][0..6];
def directory = "";
String jsonFileName = "PricingChangesSuperCategory-Market-Primary-Secondary.json"

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsResponseBeforeMigration/" + jsonFileName
	}
else{
	directory = "/Applications/VPS_JSON/vpsResponseBeforeMigration/" + jsonFileName // to insert directory for mac
	}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="datasink" name="storeResponse" id="4fa4fbed-7563-4a0f-8c9f-5d93e87d43be">
    <con:settings/>
    <con:config xsi:type="con:DataSinkStep">
      <con:dataSink type="File">
        <con:configuration>
          <fileName>${setFolderDirectory#result}</fileName>
          <separator/>
          <escape/>
          <quote>false</quote>
          <trim>true</trim>
          <append>false</append>
          <encoding>UTF-8</encoding>
        </con:configuration>
      </con:dataSink>
      <con:properties>
        <con:property>
          <con:name>PricingChangesSuperCategory-Market-SingleCurrency</con:name>
          <con:value>${fetchResponse#result}</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>officeCode</con:name>
      <con:value>LON</con:value>
    </con:property>
    <con:property>
      <con:name>countryCode</con:name>
      <con:value>GBR</con:value>
    </con:property>
    <con:property>
      <con:name>currencyCode</con:name>
      <con:value>GBR</con:value>
    </con:property>
    <con:property>
      <con:name>fromDateTime</con:name>
      <con:value>2024-01-13T05:56:46</con:value>
    </con:property>
    <con:property>
      <con:name>currencyCode1</con:name>
      <con:value>GBP</con:value>
    </con:property>
    <con:property>
      <con:name>currencyCode2</con:name>
      <con:value>EUR</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
</con:testCase>
