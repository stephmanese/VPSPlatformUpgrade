<?xml version="1.0" encoding="UTF-8"?>
<con:testCase xmlns:con="http://eviware.com/soapui/config" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="9a91fbc1-4652-47f5-b293-b309dbf5fb6c" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PricingChangesCategory|fromDatefuturedate" searchProperties="true" timeout="0" disabled="true">
  <con:settings id="ead5dbc9-05a7-4259-99ca-42861cce5eb5">
    <con:setting id="9a91fbc1-4652-47f5-b293-b309dbf5fb6cfileName">PricingChangesCategory%7CfromDatefuturedate</con:setting>
  </con:settings>
  <con:testStep type="groovy" name="loadTestData-market" id="b9ae6f91-549e-404e-b04c-4de780503b68">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-market}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="setVariables" id="6d1f9e8b-bd36-4f8d-b316-e02cd268b759">
    <con:settings/>
    <con:config>
      <script>//set variables from the fetched test data needed for the REST request
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import java.time.LocalDateTime

//to get the testData-market

def officeCode = context.expand( '${loadTestData-market#result#$[\'market\'][\'USA\'][\'officeCode\']}' )
log.info(officeCode)
testRunner.testCase.setPropertyValue("officeCode",officeCode);

def countryCode = context.expand( '${loadTestData-market#result#$[\'market\'][\'USA\'][\'countryCode\']}' )
log.info(countryCode)
testRunner.testCase.setPropertyValue("countryCode",countryCode);

def currencyCode = context.expand( '${loadTestData-market#result#$[\'market\'][\'USA\'][\'currencyCodes\'][0]}' )
log.info(currencyCode)
testRunner.testCase.setPropertyValue("currencyCode",currencyCode);



//to Get the date and convert to TimeZone
Date dateTimeNow  = LocalDateTime.now().plusHours(24).toDate()
log.info(dateTimeNow)

def fromDateTime = dateTimeNow.format("yyyy-MM-dd'T'HH:mm:ss", TimeZone.getTimeZone('UTC'))
log.info(fromDateTime)
testRunner.testCase.setPropertyValue("fromDateTime",fromDateTime);</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="pricingChanges-categoryBefore" id="0ff6be33-3207-4b5c-8d9b-154a3e9a11de">
    <con:settings/>
    <con:config service="Pricing-Snapshot" resourcePath="/v1/price-changes:category" methodName="price-changes:category" xsi:type="con:RestRequestStep">
      <con:restRequest name="pricingChanges-categoryBefore" id="00ab5cfc-962b-4ce5-a72a-46022352bc2c" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:request>{
  "market": {
    "officeCode": "${#TestCase#officeCode}",
    "countryCode": "${#TestCase#countryCode}",
    "currencyCodes": [
    "${#TestCase#currencyCode}"
    ]
  },
    "fromDateTime": "${#TestCase#fromDateTime}"
}</con:request>
        <con:originalUri>http://vps.rccl.com/vps-echo/pricing-snapshot/v1/price-changes:category</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="7d006fff-4c0f-4ec6-8c6c-1900f15d7ba6" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>400</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="c60ee9c9-36e8-4ce4-b595-6c1d08792ec1" name="Script Assertion">
          <con:configuration>
            <scriptText>def jsonRes = messageExchange.getResponse().contentAsString


def jsonSlurper = new groovy.json.JsonSlurper();
def parse = jsonSlurper.parseText(jsonRes)


def error = parse.status.details[0].message
assert error=="From can not be after to"</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="9ba133c3-3cd7-45c8-8561-64ce1c92ea67">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="015736b2-7549-4743-94e6-d64278e45b46">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="e94bb75c-7f53-42a7-9f97-eb5aa3fcaf53">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b2abf588-b45c-4e44-9dd0-8b2249bbc4e7">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="5322014d-43c7-4904-af96-4329a0290c25">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="495bcf82-3dfa-4956-b162-f0b1bfb07f10">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="feba3ebd-aeec-4c25-8b24-4b9e406c22cb">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b3e5490d-8b80-49fe-97a2-a82077345345">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a98aa22f-37cb-4a0e-84c6-f2de81903489">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="fetchResponse" id="2abd92f6-af7b-4ab1-a84d-268850e44abe">
    <con:settings/>
    <con:config>
      <script>//fetch the REST response
import groovy.json.JsonSlurper
import groovy.json.JsonOutput


def restResponse = context.expand( '${pricingChanges-categoryBefore#Response}' );
def restResponse2 = new JsonSlurper().parseText(restResponse);
def prettyJson = new groovy.json.JsonBuilder(restResponse2).toPrettyString();</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="setFolderDirectory" id="b24e6b86-0a4b-41f6-a95d-ab3e622c2e53">
    <con:settings/>
    <con:config>
      <script>//set folder directory for storing the response

String osType = System.properties['os.name'][0..6];
def directory = "";
String jsonFileName = "PricingChangesCategory-fromFutureDate.json"

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsResponseBeforeMigration/" + jsonFileName
	}
else{
	directory = "/Applications/VPS_JSON/vpsResponseBeforeMigration/" + jsonFileName // to insert directory for mac
	}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="datasink" name="storeResponse" id="3fd99d7d-79e5-4138-ba7d-183853e3172e">
    <con:settings/>
    <con:config xsi:type="con:DataSinkStep">
      <con:dataSink type="File">
        <con:configuration>
          <fileName>${setFolderDirectory#result}</fileName>
          <separator/>
          <escape/>
          <quote>false</quote>
          <trim>true</trim>
          <append>false</append>
          <encoding>UTF-8</encoding>
        </con:configuration>
      </con:dataSink>
      <con:properties>
        <con:property>
          <con:name>PricingChangesCategory-fromFutureDate</con:name>
          <con:value>${fetchResponse#result}</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>officeCode</con:name>
      <con:value>MIA</con:value>
    </con:property>
    <con:property>
      <con:name>countryCode</con:name>
      <con:value>USA</con:value>
    </con:property>
    <con:property>
      <con:name>currencyCode1</con:name>
      <con:value>GBP</con:value>
    </con:property>
    <con:property>
      <con:name>currencyCode2</con:name>
      <con:value>EUR</con:value>
    </con:property>
    <con:property>
      <con:name>fromDateTime</con:name>
      <con:value>2024-01-16T04:56:54</con:value>
    </con:property>
    <con:property>
      <con:name>currencyCode</con:name>
      <con:value/>
    </con:property>
  </con:properties>
  <con:reportParameters/>
</con:testCase>
