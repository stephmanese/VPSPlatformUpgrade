<?xml version="1.0" encoding="UTF-8"?>
<con:testCase xmlns:con="http://eviware.com/soapui/config" id="f1d33bba-462c-4cf7-85af-49b8b6cf5508" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="super-category-pricing|C-CT (AGENCY_1 as client)" searchProperties="true" timeout="0" disabled="true">
  <con:settings id="36a0144f-fbbf-47c0-94ac-44425126b86c">
    <con:setting id="f1d33bba-462c-4cf7-85af-49b8b6cf5508fileName">super-category-pricing%7CC-CT-%28AGENCY_1-as-client%29</con:setting>
  </con:settings>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="loadTestData-celebrity" id="838bbd5e-43e8-4318-bf76-9df29a03c7bc">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-celebrity}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="loadTestData-market" id="7edfde15-3f5a-4306-9381-01c38e6ea5c1">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-market}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="loadTestData-agency" id="f39cb684-5316-4eb7-90fc-9aca4baadd67">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-agency}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="loadTestData-guestPreferences" id="13c0a20c-8382-4bfb-9f8d-5fed0f79670b">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-guestPreferences}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="setVariables" id="f3756dcf-0c14-44d6-8132-a268af3b8604">
    <con:settings/>
    <con:config>
      <script>//set variables from the fetched test data needed for the REST request
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get data from TestData-agency
def clientId = context.expand( '${loadTestData-agency#result#$[\'agency\'][\'odysseus\'][\'clientId\']}' )
log.info(clientId);
testRunner.testCase.setPropertyValue("clientId",clientId);

//get data from TestData-royal
def brandCode = context.expand( '${loadTestData-celebrity#result#$[\'celebrity\'][\'brandCode\']}' )
log.info(brandCode);
testRunner.testCase.setPropertyValue("brandCode",brandCode);

def shipCode = context.expand( '${loadTestData-celebrity#result#$[\'celebrity\'][\'galapagos\'][\'CT\'][\'shipCode\']}' )
log.info(shipCode);
testRunner.testCase.setPropertyValue("shipCode",shipCode);

def fromSailDate = context.expand( '${loadTestData-celebrity#result#$[\'celebrity\'][\'galapagos\'][\'CT\'][\'fromSailDate\']}' )
log.info(fromSailDate);
testRunner.testCase.setPropertyValue("fromSailDate",fromSailDate);

def packageCode = context.expand( '${loadTestData-celebrity#result#$[\'celebrity\'][\'galapagos\'][\'CT\'][\'packageCode\']}' )
log.info(packageCode);
testRunner.testCase.setPropertyValue("packageCode",packageCode);

def age = context.expand( '${loadTestData-guestPreferences#result#$[\'guestPreferences\'][0][\'age\']}' )
log.info(age);
testRunner.testCase.setPropertyValue("age",age);

def lifeStageCode = context.expand( '${loadTestData-guestPreferences#result#$[\'guestPreferences\'][0][\'lifeStageCode\']}' )
log.info(lifeStageCode);
testRunner.testCase.setPropertyValue("lifeStageCode",lifeStageCode);


//get data from TestData-market
def countryCode = context.expand( '${loadTestData-market#result#$[\'market\'][\'USA\'][\'countryCode\']}' )
log.info(countryCode);
testRunner.testCase.setPropertyValue("countryCode",countryCode);

def officeCode = context.expand( '${loadTestData-market#result#$[\'market\'][\'USA\'][\'officeCode\']}' )
log.info(officeCode);
testRunner.testCase.setPropertyValue("officeCode",officeCode);

def currencyCode = context.expand( '${loadTestData-market#result#$[\'market\'][\'USA\'][\'currencyCode\']}' )
log.info(currencyCode);
testRunner.testCase.setPropertyValue("currencyCode",currencyCode);</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="restrequest" name="super-category-pricing|C-CT (AGENCY_1 as client)-Before" id="b82f330f-0e08-46c0-a3b4-59b968bfb494">
    <con:settings/>
    <con:config service="External Partners(Ingress)(Akamai)" resourcePath="/v1/super-category-pricing" methodName="super-category-pricing" xsi:type="con:RestRequestStep">
      <con:restRequest name="super-category-pricing|C-CT (AGENCY_1 as client)-Before" id="54e91351-891e-42ab-ab9b-51424859bc84" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="X-API-key" value="${#Project#X-API-key}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:request>{
	"clients": [
		{
			"clientContext": "AGENCY_1",
			"clientId": "${#TestCase#clientId}"
		}
	],
	"companyShortName": "ODYSSEUS",
	"brandCode": "${#TestCase#brandCode}",
	"shipCode": "${#TestCase#shipCode}",
	"sailDate": "${#TestCase#fromSailDate}",
	"packageCode": "${#TestCase#packageCode}",
	"officeCode": "${#TestCase#officeCode}",
	"countryCode": "${#TestCase#countryCode}",
	"currencyCode": "${#TestCase#currencyCode}",
	"occupancy": 2,
	"bookingTypeCode": "I",
	"pricingPreference": {
		"includeGuestLevelDetail": true,
		"includeGratuity": true,
		"depositFareType": "BOTH"
	},
	"guestPreferences": [
		{
			"age": "${#TestCase#age}",
			"lifeStageCode": "${#TestCase#lifeStageCode}"
		},
		{
			"age": "${#TestCase#age}",
			"lifeStageCode": "${#TestCase#lifeStageCode}"
		}
	]
}</con:request>
        <con:assertion type="Valid HTTP Status Codes" id="4c4504a7-5eea-40eb-aab0-517f0370171a" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="da3008ff-09c7-4319-b0a8-cc97d58facb1" name="Script Assertion">
          <con:configuration>
            <scriptText>def jsonRes = messageExchange.getResponse().contentAsString

def jsonSlurper = new groovy.json.JsonSlurper();
def parse = jsonSlurper.parseText(jsonRes)

def superCategoryBestPrices = parse.promotionBestPrices[0].superCategoryBestPrices
log.info superCategoryBestPrices
assert superCategoryBestPrices != null</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="9ba133c3-3cd7-45c8-8561-64ce1c92ea67">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="015736b2-7549-4743-94e6-d64278e45b46">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="e94bb75c-7f53-42a7-9f97-eb5aa3fcaf53">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b2abf588-b45c-4e44-9dd0-8b2249bbc4e7">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="5322014d-43c7-4904-af96-4329a0290c25">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="495bcf82-3dfa-4956-b162-f0b1bfb07f10">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="feba3ebd-aeec-4c25-8b24-4b9e406c22cb">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b3e5490d-8b80-49fe-97a2-a82077345345">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a98aa22f-37cb-4a0e-84c6-f2de81903489">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="fetchResponse" id="c08087b6-c685-4912-92f5-0b96bb806a3d">
    <con:settings/>
    <con:config>
      <script>//fetch the REST response
import groovy.json.JsonSlurper
import groovy.json.JsonOutput


def restResponse = context.expand( '${super-category-pricing|C-CT (AGENCY_1 as client)-Before#Response}' );
def restResponse2 = new JsonSlurper().parseText(restResponse);
def prettyJson = new groovy.json.JsonBuilder(restResponse2).toPrettyString();</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="setFolderDirectory" id="f08eb186-6ffa-4992-b4f2-f9e354c52582">
    <con:settings/>
    <con:config>
      <script>//set folder directory for storing the response

String osType = System.properties['os.name'][0..6];
def directory = "";
String jsonFileName = "super-category-pricing-C-CT_AGENCY_1AsClient-External-Partners.json"

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsResponseBeforeMigration/" + jsonFileName
	}
else{
	directory = "/Applications/VPS_JSON/vpsResponseBeforeMigration/" + jsonFileName // to insert directory for mac
	}</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="datasink" name="storeResponse" id="116beed4-15dc-472b-88c9-d038681f09c5">
    <con:settings/>
    <con:config xsi:type="con:DataSinkStep">
      <con:dataSink type="File">
        <con:configuration>
          <fileName>${setFolderDirectory#result}</fileName>
          <separator/>
          <escape/>
          <quote>false</quote>
          <trim>true</trim>
          <append>false</append>
          <encoding>UTF-8</encoding>
        </con:configuration>
      </con:dataSink>
      <con:properties>
        <con:property>
          <con:name>super-category-pricing-C-CT_AGENCY_1AsClient-External-Partners</con:name>
          <con:value>${fetchResponse#result}</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:properties/>
  <con:reportParameters/>
</con:testCase>
