<?xml version="1.0" encoding="UTF-8"?>
<con:testCase xmlns:con="http://eviware.com/soapui/config" id="f16d0438-8c23-4d0c-8fba-397a191f64c6" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="CruiseSearch-POST|Royal-CO-1/2Pax||GroupByPackage||Offset||sortOrderDesc||Facets" searchProperties="true" timeout="0" disabled="true">
  <con:settings id="402e19b0-b664-4c07-970b-2f872a3dbcc3">
    <con:setting id="f16d0438-8c23-4d0c-8fba-397a191f64c6fileName">CruiseSearch-POST%7CRoyal-CO-1%2F2Pax%7C%7CGroupByPackage%7C%7COffset%7C%7CsortOrderDesc%7C%7CFacets</con:setting>
  </con:settings>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="loadTestData-royal" id="e9e5a8bc-0e58-4c04-9975-f6384ec17d44">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-royal}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="loadTestData-market" id="7d33bac4-36b4-4428-bbf9-c09622fa82f5">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-market}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="groovy" name="setVariables" id="8769518e-4d3d-4947-a5ac-feb69ec1a539">
    <con:settings/>
    <con:config>
      <script>//set variables from the fetched test data needed for the REST request
import groovy.json.JsonSlurper
import groovy.json.JsonOutput


//get data from TestData-royal
def brand = context.expand( '${loadTestData-royal#result#$[\'royal\'][\'brandCode\']}' )
log.info(brand);
testRunner.testCase.setPropertyValue("brand",brand);

def fromSailDate = context.expand( '${loadTestData-royal#result#$[\'royal\'][\'CO\'][\'fromSailDate\']}' )
log.info(fromSailDate);
testRunner.testCase.setPropertyValue("fromSailDate",fromSailDate);

def toSailDate = context.expand( '${loadTestData-royal#result#$[\'royal\'][\'CO\'][\'toSailDate\']}' )
log.info(toSailDate);
testRunner.testCase.setPropertyValue("toSailDate",toSailDate);

//get data from TestData-market
def office = context.expand( '${loadTestData-market#result#$[\'market\'][\'USA\'][\'officeCode\']}' )
log.info(office);
testRunner.testCase.setPropertyValue("office",office);

def country = context.expand( '${loadTestData-market#result#$[\'market\'][\'USA\'][\'countryCode\']}' )
log.info(country);
testRunner.testCase.setPropertyValue("country",country);

def currency = context.expand( '${loadTestData-market#result#$[\'market\'][\'USA\'][\'currencyCode\']}' )
log.info(currency);
testRunner.testCase.setPropertyValue("currency",currency);</script>
    </con:config>
  </con:testStep>
  <con:testStep xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="restrequest" name="CruiseSearch-POST|Royal-CO-1/2Pax||GroupByPackage||Offset||sortOrderDesc||Facets-After" id="b41e592c-9cf5-4559-ab52-e9af1d587408">
    <con:settings/>
    <con:config service="Vacation(Ingress)" resourcePath="/v1/cruise-search" methodName="cruise-search" xsi:type="con:RestRequestStep">
      <con:restRequest name="CruiseSearch-POST|Royal-CO-1/2Pax||GroupByPackage||Offset||sortOrderDesc||Facets-After" id="9f0a5875-3277-472d-add2-81d285c516b0" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:request>{
	"header": {
		"application": "royalcaribbean.com",
		"language": "US"
	},
	"criteria": {
		"office": "${#TestCase#office}",
		"country": "${#TestCase#country}",
		"currency": "${#TestCase#currency}",
		"channel": "ES",
		"bookingType": "FIT",
		"cruiseType": {
			"value": [
				"CO"
			]
		},
		"brand": {
			"value": [
				"${#TestCase#brand}"
			]
		},
		"sailingDate": {
			"dateRange": {
				"from": "${#TestCase#fromSailDate}",
				"to": "${#TestCase#toSailDate}"
			}
		},
		"occupancy": {
			"adult": 2,
			"child": 0,
			"infant": 0
		},
		"accessibleCabins": false
	},
	"resultsPreference": {
		"groupBy": "PACKAGE",
		"sortBy": "PRICE",
		"sortOrder": "DESCENDING",
		"strictSearch": true,
		"includeOnlyIfPriceAvailable": true,
		"includeFacets": true,
		"pagination": {
			"count": 10,
			"offset": 1
		}
	}
}</con:request>
        <con:assertion type="Valid HTTP Status Codes" id="533d3b00-95a2-4ac8-86cc-eac3fe1cef2f" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="861f1a36-8924-44fd-abdd-a7d255aa2ebe" name="Script Assertion">
          <con:configuration>
            <scriptText>//fetching request data
def request_sailDate = context.expand( '${#TestCase#fromSailDate}' )
log.info(request_sailDate)

//fetching response
def jsonRes = messageExchange.getResponse().contentAsString

def jsonSlurper = new groovy.json.JsonSlurper();
def parse = jsonSlurper.parseText(jsonRes)

def response_sailDate = parse.resultsByPackage.packageSummaryWithClassLevelPricing[0].cabinClassPriceBySailing[0].sailingRef.saildate
log.info(response_sailDate)


def packageSummaryWithClassLevelPricing = parse.resultsByPackage.packageSummaryWithClassLevelPricing[0]
log.info(packageSummaryWithClassLevelPricing)

//assertion
assert request_sailDate == response_sailDate
assert packageSummaryWithClassLevelPricing != null</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="9ba133c3-3cd7-45c8-8561-64ce1c92ea67">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="015736b2-7549-4743-94e6-d64278e45b46">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="e94bb75c-7f53-42a7-9f97-eb5aa3fcaf53">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b2abf588-b45c-4e44-9dd0-8b2249bbc4e7">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="5322014d-43c7-4904-af96-4329a0290c25">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="495bcf82-3dfa-4956-b162-f0b1bfb07f10">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="feba3ebd-aeec-4c25-8b24-4b9e406c22cb">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b3e5490d-8b80-49fe-97a2-a82077345345">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a98aa22f-37cb-4a0e-84c6-f2de81903489">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="compareResponse" id="b669191f-0245-480c-8d4b-c81a43462f95">
    <con:settings/>
    <con:config>
      <script><![CDATA[//reference: https://support.smartbear.com/readyapi/faq/how-do-i-compare-two-dynamic-json-responses/
//compare before and after migration response
import groovy.json.*
import com.eviware.soapui.support.JsonPathValueNode
import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.databind.node.ArrayNode
import com.fasterxml.jackson.databind.node.ObjectNode
import com.jayway.jsonpath.Configuration
import com.jayway.jsonpath.JsonPath
import com.jayway.jsonpath.spi.json.JacksonJsonNodeJsonProvider
import com.jayway.jsonpath.spi.mapper.JacksonMappingProvider
import com.eviware.soapui.model.testsuite.*;

def responseIsSame = true  //flag for validation

//get user's device OS and set directory
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsResponseBeforeMigration/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsResponseBeforeMigration/" //directory for mac
	}



//baseline response
def filePath = directory + "CruiseSearch-POST-Royal-CO-1-2Pax-GroupByPackage-Offset-sortOrderDesc-Facets.json"
def baselineResp = new JsonSlurper().parseText(new File(filePath).text)
//baselineResp.status.remove("dateTime")
def modifiedBaselineResp = JsonOutput.toJson(baselineResp)

//current response
def currentJsonResp = context.expand('${CruiseSearch-POST|Royal-CO-1/2Pax||GroupByPackage||Offset||sortOrderDesc||Facets-After#Response}') 
def outputOfCurrentResp = new JsonSlurper().parseText(currentJsonResp)
//outputOfCurrentResp.status.remove("dateTime")
def modifiedOutputOfCurrentResp = JsonOutput.toJson(outputOfCurrentResp)

log.info("Baseline Response: " + modifiedBaselineResp)
log.info("Output of CurrentResponse: " + modifiedOutputOfCurrentResp)

mapper = new ObjectMapper()
JsonNode responseBefore = mapper.readTree(modifiedBaselineResp);
JsonNode responseAfter = mapper.readTree(modifiedOutputOfCurrentResp);

Set<JsonPathValueNode> pathValues = listLeafValues(responseBefore, '$');
Set<JsonPathValueNode> pathValues2 = listLeafValues(responseAfter, '$');
Configuration configuration = Configuration.builder()
        .jsonProvider(new JacksonJsonNodeJsonProvider())
        .mappingProvider(new JacksonMappingProvider(mapper))
        .build();

pathValues.each {
    try {
        JsonPath jsonPath = JsonPath.compile(it.path);
        JsonNode result = jsonPath.read(responseAfter, configuration);
        
        if (result != it.valueNode) {
            log.info('Node with path ' + it.path + ' and value ' + it.valueNode + ' are not matched')
            responseIsSame = false
        }
    } catch (Exception e) {
        log.info('Node with path ' + it.path + ' and value ' + it.valueNode + ' are not matched')
        responseIsSame = false
    }
}

pathValues2.each {
    try {
        JsonPath jsonPath = JsonPath.compile(it.path);
        JsonNode result = jsonPath.read(responseBefore, configuration);
        
        if (result != it.valueNode) {
            log.info('Node with path ' + it.path + ' and value ' + it.valueNode + ' are not matched')
            responseIsSame = false
        }
    } catch (Exception e) {
        log.info('Node with path ' + it.path + ' and value ' + it.valueNode + ' are not matched')
        responseIsSame = false
    }
}

Set<JsonPathValueNode> listLeafValues(JsonNode jsonObject, String path) {
    if (jsonObject.isObject()) {
        return getValuesFrom((ObjectNode) jsonObject, path);
    } else if (jsonObject.isArray()) {
        return getValuesFrom((ArrayNode) jsonObject, path);
    } else {
    }
}

Set<JsonPathValueNode> getValuesFrom(ObjectNode jsonObject, String path) {
    Set<JsonPathValueNode> values = new LinkedHashSet<>();
    Iterator<Map.Entry<String, JsonNode>> fields = jsonObject.fields();
    while (fields.hasNext()) {
        Map.Entry<String, JsonNode> field = fields.next();
        JsonNode value = field.getValue();
        String nodePath = path + "." + field.getKey();
        addValue(values, value, nodePath);
    }
    return values;
}

Set<JsonPathValueNode> getValuesFrom(ArrayNode array, String nodePath) {
    Set<JsonPathValueNode> values = new LinkedHashSet<>();
    int index = 0;
    for (JsonNode value : array) {
        addValue(values, value, nodePath + "[" + index + "]");
        index++;
    }
    return values;
}

def addValue(Set<JsonPathValueNode> values, JsonNode value, String nodePath) {
    if (value.isObject()) {
        values.addAll(getValuesFrom((ObjectNode) value, nodePath));
    } else if (value.isArray()) {
        values.addAll(getValuesFrom((ArrayNode) value, nodePath));
    } else if (value.isValueNode()) {
        values.add(new JsonPathValueNode(nodePath, value));
    }
}

assert responseIsSame == true
log.info("Before Migration and After Migration Responses are matched")]]></script>
    </con:config>
  </con:testStep>
  <con:properties/>
  <con:reportParameters/>
</con:testCase>
