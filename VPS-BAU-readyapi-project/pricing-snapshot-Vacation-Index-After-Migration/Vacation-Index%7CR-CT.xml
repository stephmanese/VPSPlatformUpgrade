<?xml version="1.0" encoding="UTF-8"?>
<con:testCase xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:con="http://eviware.com/soapui/config" id="e985d732-4141-4899-910a-a0b1db1ec0f2" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="Vacation Index|R-CT" searchProperties="true" timeout="0" disabled="true">
  <con:settings id="e2e34675-4c38-47be-a917-5063bc489350">
    <con:setting id="e985d732-4141-4899-910a-a0b1db1ec0f2fileName">Vacation-Index%7CR-CT</con:setting>
  </con:settings>
  <con:testStep type="groovy" name="loadTestData-royal" id="d6c5af92-3413-4bae-aa00-bdd775032abb">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-royal}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="loadTestData-market" id="936dabde-a60e-4ac3-80d2-4ac23faf5c03">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-market}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="setVariables" id="a7992b72-f4e9-4029-9cfe-c0f819902cea">
    <con:settings/>
    <con:config>
      <script>//set variables from the fetched test data needed for the REST request
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get data from TestData-royal

def shipCode = context.expand( '${loadTestData-royal#result#$[\'royal\'][\'CT\'][\'shipCode\']}' )
log.info(shipCode);
testRunner.testCase.setPropertyValue("shipCode",shipCode);

def sailDate = context.expand( '${loadTestData-royal#result#$[\'royal\'][\'CT\'][\'sailDate\']}' )
log.info(sailDate);
testRunner.testCase.setPropertyValue("sailDate",sailDate);

def packageCode = context.expand( '${loadTestData-royal#result#$[\'royal\'][\'CT\'][\'packageCode\']}' )
log.info(packageCode);
testRunner.testCase.setPropertyValue("packageCode",packageCode);

//get data from TestData-market
def officeCode = context.expand( '${loadTestData-market#result#$[\'market\'][\'USA\'][\'officeCode\']}' )
log.info(officeCode);
testRunner.testCase.setPropertyValue("officeCode",officeCode);

def countryCode = context.expand( '${loadTestData-market#result#$[\'market\'][\'USA\'][\'countryCode\']}' )
log.info(countryCode);
testRunner.testCase.setPropertyValue("countryCode",countryCode);

def currencyCode = context.expand( '${loadTestData-market#result#$[\'market\'][\'USA\'][\'currencyCode\']}' )
log.info(currencyCode);
testRunner.testCase.setPropertyValue("currencyCode",currencyCode);</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="vacationIndexAfter" id="f15e4356-885f-4317-bb71-f1e90fd85b25">
    <con:settings/>
    <con:config service="Pricing-Snapshot-CDC" resourcePath="/v1/vacation-index" methodName="vacation-index" xsi:type="con:RestRequestStep">
      <con:restRequest name="vacationIndexAfter" id="cd044b28-834c-493e-b675-742260dadbd0" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:request>{
  "shipCode": "${#TestCase#shipCode}",
  "sailDate": "${#TestCase#sailDate}",
  "packageCode": "${#TestCase#packageCode}",
  "market": {
    "officeCode": "${#TestCase#officeCode}",
    "countryCode": "${#TestCase#countryCode}",
    "currencyCode": "${#TestCase#currencyCode}"
  },
  "bookingChannels": [
    "RZ"
  ]
}</con:request>
        <con:originalUri>http://vps-stg-a.rccl.com/vps-sigma/pricing-snapshot-cdc/v1/vacation-index</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="ccccb105-9f16-4283-bf3c-2faff4665164" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="bf0edb7e-209a-4270-8dba-0322e7d9581a" name="Script Assertion">
          <con:configuration>
            <scriptText>def jsonRes = messageExchange.getResponse().contentAsString

def jsonSlurper = new groovy.json.JsonSlurper();
def parse = jsonSlurper.parseText(jsonRes)

def marketLowestPrices = parse.marketLowestPrices.marketChannelKey[0]
log.info marketLowestPrices
assert marketLowestPrices!=null

def officeCode = parse.marketLowestPrices.marketChannelKey.officeCode
def countryCode = parse.marketLowestPrices.marketChannelKey.countryCode
def currencyCode = parse.marketLowestPrices.marketChannelKey.currencyCode
def bookingChannel = parse.marketLowestPrices.marketChannelKey.bookingChannel</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="5322014d-43c7-4904-af96-4329a0290c25">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="495bcf82-3dfa-4956-b162-f0b1bfb07f10">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="feba3ebd-aeec-4c25-8b24-4b9e406c22cb">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b3e5490d-8b80-49fe-97a2-a82077345345">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a98aa22f-37cb-4a0e-84c6-f2de81903489">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="compareResponse" id="8358be6a-2b32-4ab6-b858-e7bb44199ca2">
    <con:settings/>
    <con:config>
      <script><![CDATA[//reference: https://support.smartbear.com/readyapi/faq/how-do-i-compare-two-dynamic-json-responses/
//compare before and after migration response
import groovy.json.*
import com.eviware.soapui.support.JsonPathValueNode
import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.databind.node.ArrayNode
import com.fasterxml.jackson.databind.node.ObjectNode
import com.jayway.jsonpath.Configuration
import com.jayway.jsonpath.JsonPath
import com.jayway.jsonpath.spi.json.JacksonJsonNodeJsonProvider
import com.jayway.jsonpath.spi.mapper.JacksonMappingProvider
import com.eviware.soapui.model.testsuite.*;

def responseIsSame = true  //flag for validation

//get user's device OS and set directory
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsResponseBeforeMigration/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsResponseBeforeMigration/" //directory for mac
	}



//baseline response
def filePath = directory + "Vacation Index-R-CT.json"
def baselineResp = new JsonSlurper().parseText(new File(filePath).text)
def modifiedBaselineResp = JsonOutput.toJson(baselineResp)

//current response
def currentJsonResp = context.expand('${vacationIndexAfter#Response}') 
def outputOfCurrentResp = new JsonSlurper().parseText(currentJsonResp)
def modifiedOutputOfCurrentResp = JsonOutput.toJson(outputOfCurrentResp)

log.info("Baseline Response: " + modifiedBaselineResp)
log.info("Output of CurrentResponse: " + modifiedOutputOfCurrentResp)

mapper = new ObjectMapper()
JsonNode responseBefore = mapper.readTree(modifiedBaselineResp);
JsonNode responseAfter = mapper.readTree(modifiedOutputOfCurrentResp);

Set<JsonPathValueNode> pathValues = listLeafValues(responseBefore, '$');
Set<JsonPathValueNode> pathValues2 = listLeafValues(responseAfter, '$');
Configuration configuration = Configuration.builder()
        .jsonProvider(new JacksonJsonNodeJsonProvider())
        .mappingProvider(new JacksonMappingProvider(mapper))
        .build();

pathValues.each {
    try {
        JsonPath jsonPath = JsonPath.compile(it.path);
        JsonNode result = jsonPath.read(responseAfter, configuration);
        
        if (result != it.valueNode) {
            log.info('Node with path ' + it.path + ' and value ' + it.valueNode + ' are not matched')
            responseIsSame = false
        }
    } catch (Exception e) {
        log.info('Node with path ' + it.path + ' and value ' + it.valueNode + ' are not matched')
        responseIsSame = false
    }
}

pathValues2.each {
    try {
        JsonPath jsonPath = JsonPath.compile(it.path);
        JsonNode result = jsonPath.read(responseBefore, configuration);
        
        if (result != it.valueNode) {
            log.info('Node with path ' + it.path + ' and value ' + it.valueNode + ' are not matched')
            responseIsSame = false
        }
    } catch (Exception e) {
        log.info('Node with path ' + it.path + ' and value ' + it.valueNode + ' are not matched')
        responseIsSame = false
    }
}

Set<JsonPathValueNode> listLeafValues(JsonNode jsonObject, String path) {
    if (jsonObject.isObject()) {
        return getValuesFrom((ObjectNode) jsonObject, path);
    } else if (jsonObject.isArray()) {
        return getValuesFrom((ArrayNode) jsonObject, path);
    } else {
    }
}

Set<JsonPathValueNode> getValuesFrom(ObjectNode jsonObject, String path) {
    Set<JsonPathValueNode> values = new LinkedHashSet<>();
    Iterator<Map.Entry<String, JsonNode>> fields = jsonObject.fields();
    while (fields.hasNext()) {
        Map.Entry<String, JsonNode> field = fields.next();
        JsonNode value = field.getValue();
        String nodePath = path + "." + field.getKey();
        addValue(values, value, nodePath);
    }
    return values;
}

Set<JsonPathValueNode> getValuesFrom(ArrayNode array, String nodePath) {
    Set<JsonPathValueNode> values = new LinkedHashSet<>();
    int index = 0;
    for (JsonNode value : array) {
        addValue(values, value, nodePath + "[" + index + "]");
        index++;
    }
    return values;
}

def addValue(Set<JsonPathValueNode> values, JsonNode value, String nodePath) {
    if (value.isObject()) {
        values.addAll(getValuesFrom((ObjectNode) value, nodePath));
    } else if (value.isArray()) {
        values.addAll(getValuesFrom((ArrayNode) value, nodePath));
    } else if (value.isValueNode()) {
        values.add(new JsonPathValueNode(nodePath, value));
    }
}

assert responseIsSame == true
log.info("Before Migration and After Migration Responses are matched")]]></script>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>shipCode</con:name>
      <con:value>RD</con:value>
    </con:property>
    <con:property>
      <con:name>sailDate</con:name>
      <con:value>20240621</con:value>
    </con:property>
    <con:property>
      <con:name>packageCode</con:name>
      <con:value>RD13BL07</con:value>
    </con:property>
    <con:property>
      <con:name>officeCode</con:name>
      <con:value>MIA</con:value>
    </con:property>
    <con:property>
      <con:name>countryCode</con:name>
      <con:value>USA</con:value>
    </con:property>
    <con:property>
      <con:name>currencyCode</con:name>
      <con:value>USD</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
</con:testCase>
