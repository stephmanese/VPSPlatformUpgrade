<?xml version="1.0" encoding="UTF-8"?>
<con:testCase xmlns:con="http://eviware.com/soapui/config" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="864f7263-4f80-46a0-9f11-6209e7802dfc" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PricingChangesSuperCategory|Market-SingleCurrency" searchProperties="true" timeout="0" disabled="true">
  <con:settings id="cd3145f0-d66f-49b6-9937-3562c06db1ce">
    <con:setting id="864f7263-4f80-46a0-9f11-6209e7802dfcfileName">PricingChangesSuperCategory%7CMarket-SingleCurrency</con:setting>
  </con:settings>
  <con:testStep type="groovy" name="loadTestData-market" id="91b6a0e7-c6ab-4982-950e-038dbe90c9bd">
    <con:settings/>
    <con:config>
      <script>//load/fetch test data from an external json file
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsTestData/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsTestData/" //to insert directory for mac
	}

	
def testData = context.expand( '${#Project#testData-market}' )
def filePath = directory + testData
def restResponse = new JsonSlurper().parseText(new File(filePath).text)
def prettyJson = new groovy.json.JsonBuilder(restResponse).toPrettyString()</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="setVariables" id="86b66cdb-d46f-4f5f-a35c-9f3c51999349">
    <con:settings/>
    <con:config>
      <script>//set variables from the fetched test data needed for the REST request
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import java.time.LocalDateTime

//to get the testData-market

def officeCode = context.expand( '${loadTestData-market#result#$[\'market\'][\'USA\'][\'officeCode\']}' )
log.info(officeCode)
testRunner.testCase.setPropertyValue("officeCode",officeCode);

def countryCode = context.expand( '${loadTestData-market#result#$[\'market\'][\'USA\'][\'countryCode\']}' )
log.info(countryCode)
testRunner.testCase.setPropertyValue("countryCode",countryCode);

def currencyCode = context.expand( '${loadTestData-market#result#$[\'market\'][\'USA\'][\'currencyCode\']}' )
log.info(currencyCode)
testRunner.testCase.setPropertyValue("currencyCode",currencyCode);


//to Get the date and convert to TimeZone
Date dateTimeNow  = LocalDateTime.now().minusHours(47).toDate()
log.info(dateTimeNow)

def fromDateTime = dateTimeNow.format("yyyy-MM-dd'T'HH:mm:ss", TimeZone.getTimeZone('UTC'))
log.info(fromDateTime)
testRunner.testCase.setPropertyValue("fromDateTime",fromDateTime);</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="priceChanges-superCategoryAfter" id="1d3e1736-3d2a-4d2c-9ccb-970d849a317a">
    <con:settings/>
    <con:config service="Pricing-Snapshot" resourcePath="/v1/price-changes:super-category" methodName="price-changes:super-category" xsi:type="con:RestRequestStep">
      <con:restRequest name="priceChanges-superCategoryAfter" id="fb1ed1e0-0c8c-4b1a-92a3-fcccfc83f47a" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:request>{
  "market": {
    "officeCode": "${#TestCase#officeCode}",
    "countryCode": "${#TestCase#countryCode}",
    "currencyCodes": [
    "${#TestCase#currencyCode}"
    ]
  },
    "fromDateTime": "${#TestCase#fromDateTime}"
}</con:request>
        <con:originalUri>http://vps-stg-a.rccl.com/vps-echo/pricing-snapshot/v1/price-changes:super-category</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="17d452b5-0651-40ca-aa7b-6d23c9ccbda3" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="7dff4ac5-074c-4f58-8fe3-8430312a5484">
          <con:configuration>
            <scriptText>def jsonRes = messageExchange.getResponse().contentAsString

def jsonSlurper = new groovy.json.JsonSlurper();
def parse = jsonSlurper.parseText(jsonRes)

def keys = parse.keys[0]
assert keys!=null</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="9ba133c3-3cd7-45c8-8561-64ce1c92ea67">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="015736b2-7549-4743-94e6-d64278e45b46">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="e94bb75c-7f53-42a7-9f97-eb5aa3fcaf53">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b2abf588-b45c-4e44-9dd0-8b2249bbc4e7">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="5322014d-43c7-4904-af96-4329a0290c25">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="495bcf82-3dfa-4956-b162-f0b1bfb07f10">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="feba3ebd-aeec-4c25-8b24-4b9e406c22cb">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="b3e5490d-8b80-49fe-97a2-a82077345345">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a98aa22f-37cb-4a0e-84c6-f2de81903489">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="compareResponse" id="05904f1b-28cd-406c-b6d6-e02666e8417a">
    <con:settings/>
    <con:config>
      <script>import groovy.json.JsonSlurper
import groovy.json.JsonOutput

//get OS and set directory based on OS
String osType = System.properties['os.name'][0..6];
def directory = "";

if (osType == "Windows"){
	directory = "C:/VPS_JSON/vpsResponseBeforeMigration/"
	}
else{
	directory = "/Applications/VPS_JSON/vpsResponseBeforeMigration/" //to insert directory for mac
	}

//for response before migration
def filePath = directory + "PricingChangesSuperCategory-Market-SingleCurrency.json"; // Retrieving JSON response from a text file
def jsonObject1 = new JsonSlurper().parseText(new File(filePath).text); // Parsing JSON response into JSON objects
jsonObject1.status.remove("dateTime"); //Removing specific elements from the JSON objects
jsonObject1.dateTimeRange.remove("fromDateTime");
jsonObject1.dateTimeRange.remove("toDateTime");
def refStr = new groovy.json.JsonBuilder(jsonObject1).toPrettyString(); // Converting JSON objects back to pretty-printed JSON strings

refStr = refStr.replaceAll('}', '');   // without this, there is a close brace whose result is only differentiated by its existance
refStr = refStr.replaceAll(',', '');
def refStrList = refStr.split(); // Splitting strings into lists and sorting them
def refStrListSorted = refStrList.sort(); 

//for response after migration
def jsonString2 = context.expand( '${priceChanges-superCategoryAfter#Response}' );
def jsonObject2 = new groovy.json.JsonSlurper().parseText(jsonString2);
jsonObject2.status.remove("dateTime");
jsonObject2.dateTimeRange.remove("fromDateTime");
jsonObject2.dateTimeRange.remove("toDateTime");
def compStr = new groovy.json.JsonBuilder(jsonObject2).toPrettyString();

compStr = compStr.replaceAll('}', '');  // without this, there is a close brace whose result is only differentiated by its existance
compStr = compStr.replaceAll(',', '');
def compStrList = compStr.split();
def compStrListSorted = compStrList.sort();

// Sanity check to ensure both lists have the same size
log.info "refStrList.size()=" + refStrList.size();
log.info "compStrList.size()=" + compStrList.size();
assert refStrList.size().equals(compStrList.size()), "Mismatch - There are ${refStrList.size()} reference values and ${compStrList.size()} compare values";

// sorted line by sorted line check...
refStrListSorted.eachWithIndex { refValue, idx ->
   def compValue = compStrListSorted[idx];
   if ( refValue != compValue ) {
      log.info "refValue=" + refValue + "  " + idx;
      log.info "compValue=" + compValue + "  " + idx;
      assert refValue.equals(compValue), "Mismatch - At index $idx the reference value '$refValue' does not match the comparison value '$compValue'";
   };
};

// If we get here, then the contents are equal
log.info "";
log.info "   ***  Reference and Compare strings are equal  ***";

log.info "";
log.info 'Test Step "' + testRunner.runContext.currentStep.name + '" done...';</script>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>officeCode</con:name>
      <con:value>MIA</con:value>
    </con:property>
    <con:property>
      <con:name>countryCode</con:name>
      <con:value>USA</con:value>
    </con:property>
    <con:property>
      <con:name>currencyCode</con:name>
      <con:value>USD</con:value>
    </con:property>
    <con:property>
      <con:name>fromDateTime</con:name>
      <con:value>2024-01-13T05:58:43</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
</con:testCase>
